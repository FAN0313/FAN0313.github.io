<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>「学习笔记」图论入门算法</title>
      <link href="/2025/09/06/%E3%80%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8D%E5%9B%BE%E8%AE%BA%E5%85%A5%E9%97%A8%E7%AE%97%E6%B3%95/"/>
      <url>/2025/09/06/%E3%80%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8D%E5%9B%BE%E8%AE%BA%E5%85%A5%E9%97%A8%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="「学习笔记」图论入门算法"><a href="#「学习笔记」图论入门算法" class="headerlink" title="「学习笔记」图论入门算法"></a>「学习笔记」图论入门算法</h1><blockquote><p>本文主要介绍了一些图论的简单入门算法，并附带模板和例题。</p><p>主要包括：图论概念，拓扑排序，最短路，双连通分量，强连通分量，最小生成树，拟阵</p><p>难度由浅入深，适合 $普及 \sim 提高$ 的选手观看，也欢迎新手来入门，大佬来指导！</p></blockquote><h1 id="mathcal-Part-1-：一些概念："><a href="#mathcal-Part-1-：一些概念：" class="headerlink" title="$\mathcal{Part \ 1}$：一些概念："></a>$\mathcal{Part \ 1}$：一些概念：</h1><p><strong>图</strong>：一张图 $G$ 由点和边构成，点集为 $V$，边集为 $E$，记 $G=(V,E)$。若无特殊说明，$V = {1,2,\dots,n}$，$|E| = m$。   </p><p><strong>阶</strong>：图的点数 $n$，记作 $|G|$。   </p><p><strong>有向图</strong>与<strong>无向图</strong>：无向图中 $e \in E$ 没有方向，记作 $e=(u,v)$，为无序对。有向图中 $e \in E$ 有方向，记作 $e = u \to v$ 或有序对 $(u,v)$。  </p><p><strong>重边与自环</strong>：$E$ 中完全相同的两条边称为重边，连接相同点的边称为自环。   </p><p><strong>相邻</strong>：若 $(u,v) \in E$ 则称 $u,v$ 相邻。   </p><p><strong>邻边 / 出边 / 入边</strong>：无向图中与 $u$ 相连的边 $(u,v)$ 称为 $u$ 的邻边；有向图中从 $u$ 出发的边 $u \to v$ 称为 $u$ 的出边，到达 $u$ 的边 $v \to u$ 称为 $u$ 的入边。在之后的描述中，我们认为无向图的出边就是邻边。   </p><p><strong>途径</strong>：连接一串相邻结点的序列称为途径，记为 $v_0 \to v_1 \to \dots \to v_k$，满足 $(v_i, v_{i+1}) \in E$。  </p><p><strong>迹</strong>：不经过重复边的途径。   </p><p><strong>回路</strong>：$v_0 = v_k$ 的迹。   </p><p><strong>路径</strong>：所有点互不相同的途径，也称<strong>简单路径</strong>。   </p><p><strong>环</strong>：除 $v_0 = v_k$ 外所有点互不相同的途径。   </p><p><strong>联通</strong>：无向图中存在 $v_0 = u, v_k = v$ 的途径则 $u, v$ 联通。   </p><p><strong>弱联通</strong>：有向图改为无向图后 $u, v$ 联通则称 $u, v$ 弱联通。   </p><p><strong>连通图</strong>：任意两点连通的无向图。   </p><p><strong>弱连通图</strong>：任意两点弱连通的有向图。   </p><p><strong>可达</strong>：有向图存在 $v_0 = u, v_k = v$ 的途径，记作 $u \rightsquigarrow v$ 。   </p><p><strong>简单图</strong>：不含重边和自环的图。  </p><p><strong>有向无环图</strong>：不含环的有向图，简称 DAG。   </p><p><strong>完全图</strong>：任意不同的两点之间恰有一条边的无向简单图。   </p><p><strong>树</strong>：不含环的无向连通图。满足 $n = m + 1$ 。若干棵（包括一棵）树组成的连通块称为<strong>森林</strong>。   </p><p><strong>稀疏图 / 稠密图</strong>：$m$ 远小于 $n^2$ 的图称为稀疏图，$m$ 接近 $n^2$ 的图称为稠密图。   </p><p><strong>平面图</strong>：能画在平面上，满足除顶点处以外无边相交的图。   </p><p><strong>子图</strong>：满足 $V’ \subseteq V, E’ \subseteq E$ 且 $E’$ 两端都在 $V’$ 中的 $G’ = (V’, E’)$ 称为 $G$ 的子图。   </p><p><strong>导出子图</strong>：选择点集 $S$ 以及所有两端都在点集内的边构成的子图，记作 $G[V’]$ 。   </p><p><strong>生成子图</strong>：$|V’| = |V|$ 的子图。  </p><p><strong>极大子图（分量）</strong>：满足某性质的极大子图 $G’$，不存在同样满足此性质的子图 $G’’$ 使得 $G’ \subsetneqq G’’ \subseteq G$ 。极大联通子图也就是连通分量，或者<strong>连通块</strong>。  </p><h1 id="mathcal-Part-2-：拓扑排序（Topological-Sorting）"><a href="#mathcal-Part-2-：拓扑排序（Topological-Sorting）" class="headerlink" title="$\mathcal{Part\  2}$ ：拓扑排序（Topological Sorting）"></a>$\mathcal{Part\  2}$ ：拓扑排序（Topological Sorting）</h1><h2 id="mathcal-Part-2-1-：Kahn"><a href="#mathcal-Part-2-1-：Kahn" class="headerlink" title="$\mathcal{Part\ 2.1}$：Kahn"></a>$\mathcal{Part\ 2.1}$：Kahn</h2><blockquote><p>$\text{Problem}$：给定  DAG $G=(V,E)$ ，要求出一个 $1\sim  n$ 的排列 $p$， 设 $q_i$ 为 $i$ 在 $p$ 中的位置，满足 $u\to v \in E$，$q_u&lt;q_v$。</p></blockquote><p>题目就是说在访问任意一个点 $u$ 之前，已经访问过 $u$ 的所有入边的点。</p><p>我们考虑先访问所有入度为 $0$ 的点（这样的点可以理解为没有访问限制），将这些点插入队列 $Q$，每次取出当前队头 $u$ ，遍历 $u$ 的所有出边，如果连向的点 $v$ 入度为 $1$，由于我们已经访问过 $u$ ，所以 $v$ 的限制以经全部满足，将 $v$ 插入队列，并将 $v$ 的入度 $-1$，反之如果 $v$ 的入度不为 $1$ ，那么只将 $v$ 的入度 $-1$ 即可。</p><p>如果最后存在没有被访问的点，证明该图的拓扑序不存在。时间复杂度 $\mathcal{O}(n+m)$。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用手写队列实现，便于输出答案，也可选择 STL 中的 queue。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Toposort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!du[i]) q[++tt] = i;</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)&#123;</span><br><span class="line">        <span class="type">int</span> u = q[hh++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i])&#123;</span><br><span class="line">            <span class="keyword">if</span> (!--du[e[i]])</span><br><span class="line">                q[++tt] = e[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= tt; i++)</span><br><span class="line">        cout &lt;&lt; q[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathcal-Part-2-2-：例题详解"><a href="#mathcal-Part-2-2-：例题详解" class="headerlink" title="$\mathcal{Part \ 2.2}$：例题详解"></a>$\mathcal{Part \ 2.2}$：例题详解</h2><h3 id="mathcal-A-：B3644-【模板】拓扑排序"><a href="#mathcal-A-：B3644-【模板】拓扑排序" class="headerlink" title="$\mathcal{A}$：B3644 【模板】拓扑排序"></a>$\mathcal{A}$：<a href="https://www.luogu.com.cn/problem/B3644">B3644 【模板】拓扑排序</a></h3><h3 id="mathcal-B-：P1137-旅行计划"><a href="#mathcal-B-：P1137-旅行计划" class="headerlink" title="$\mathcal{B}$：P1137 旅行计划"></a>$\mathcal{B}$：<a href="https://www.luogu.com.cn/problem/P1137">P1137 旅行计划</a></h3><blockquote><p>给定一个 $n$ 个点，$m$ 条边的  DAG $G$ ，对于每一个点 $i\in[1,n]$ 求出以结点 $i$ 为终点的，只走一个方向的路径经过结点最多的数量。</p></blockquote><p>思路：我们考虑如何求出结点 $i$ 的答案，注意到 $i$ 的答案取决于 $i$ 所有前驱的答案，发现这满足 拓扑性质。于是我们套用拓扑排序即可。时间复杂度 $\mathcal{O}(n+m)$。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Toposort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!du[i]) q[++tt] = i;</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)&#123;</span><br><span class="line">        <span class="type">int</span> u = q[hh++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i])&#123;</span><br><span class="line">            du[e[i]]--;</span><br><span class="line">            f[e[i]] = <span class="built_in">max</span>(f[e[i]],f[u]<span class="number">+1</span>);</span><br><span class="line">            <span class="keyword">if</span> (!du[e[i]])</span><br><span class="line">                q[++tt] = e[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; f[i]<span class="number">+1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mathcal-C-：CF915D"><a href="#mathcal-C-：CF915D" class="headerlink" title="$\mathcal{C}$：CF915D"></a>$\mathcal{C}$：<a href="https://codeforces.com/problemset/problem/915/D">CF915D</a></h3><blockquote><p>给定一个 $n$ 个点，$m$ 条边的有向图 $G$ ，问是否可以删除一条边使其变成 DAG。</p></blockquote><p>思路：如果我们 暴力枚举 删去的边并判断是否为 DAG，时间复杂度 $\mathcal{O}(m(n + m))$。我们可以换一个角度去考虑，删除一条边实际上是某一个点的入度 $-1$，于是可以枚举哪个点的入度 $-1$，时间复杂度 $\mathcal{O}(n(n + m))$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Star_F&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> N = <span class="number">505</span>, M = <span class="number">100005</span>;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line">    <span class="type">int</span> du[N], t[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">        e[++idx] = v, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">topo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span>(du[i]==<span class="number">0</span>) q.<span class="built_in">push</span>(i);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i;i=ne[i]) </span><br><span class="line">                <span class="keyword">if</span>(--du[e[i]]==<span class="number">0</span>) q.<span class="built_in">push</span>(e[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt == n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(h, <span class="number">0</span>, <span class="built_in">sizeof</span>(h)), idx = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m;i++)&#123;</span><br><span class="line">            <span class="type">int</span> u, v; cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            <span class="built_in">add</span>(u, v);</span><br><span class="line">            du[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++) t[i] = du[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">            du[i]--; </span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">topo</span>())&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++) du[i] = t[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于拓扑排序不容易单独出题，于是考虑将一些难题放入 $\mathcal{Part \ 8}$ 图论综合部分。</p><h1 id="mathcal-Part-3-：最短路（Shortest-Path）"><a href="#mathcal-Part-3-：最短路（Shortest-Path）" class="headerlink" title="$\mathcal{Part \ 3}$：最短路（Shortest Path）"></a>$\mathcal{Part \ 3}$：最短路（Shortest Path）</h1><h2 id="mathcal-Part-3-1-：-一些定义"><a href="#mathcal-Part-3-1-：-一些定义" class="headerlink" title="$\mathcal{Part\ 3.1}$： 一些定义"></a>$\mathcal{Part\ 3.1}$： 一些定义</h2><p><strong>带权图</strong>：有向图或无向图可以加上边权，边记为 $(u, v, w)$ 。边权值非负的图称为<strong>非负权图</strong>，边权为正的图称为<strong>正权图</strong>。   </p><p><strong>路径长度</strong>：带权图中路径上每条边的边权之和。用 $L(v_0 \to v_1 \to \dots \to v_k)$ 表示。   </p><p><strong>负环</strong>：边权和为负数的环。   </p><p><strong>最短路</strong>：最短的连接 $s$ 到 $t$ 的路径。若不存在这样的路径或最小值不存在，则最短路不存在。 </p><h2 id="mathcal-Part-3-2-：单源最短路径问题"><a href="#mathcal-Part-3-2-：单源最短路径问题" class="headerlink" title="$\mathcal{Part\ 3.2}$：单源最短路径问题"></a>$\mathcal{Part\ 3.2}$：单源最短路径问题</h2><blockquote><p>$\text{Problem}$：给定一个源点 $S$，求出 $S$ 到图上每个点 $u$ 的最短路径长度 $D_u$。</p></blockquote><p>在下面的算法中，我们定义 $\text{dis}_u$ 表示 $S$ 到 $u$ 的<strong>估计</strong>最短距离，初始值：$\text{dis}_S =0 ,\text{dis}_u=+\infty(u\in [1,n],u\ne S)$。</p><p>算法结束时有 $\text{dis}_u=D_u(u\in[1,n])$。负环均指<strong>源点可达</strong>负环。</p><h3 id="3-2-1：Bellman-Ford"><a href="#3-2-1：Bellman-Ford" class="headerlink" title="3.2.1：Bellman-Ford"></a>3.2.1：Bellman-Ford</h3><p>核心思想是进行松弛操作，松弛表示对每条边 $(u, v, w)$，用 $\text{dis}_u + w$ 更新 $\text{dis}_v$，松弛 $n - 1$ 轮。  </p><p>判断是否存在负环：松弛 $n$ 轮，若第 $n$ 轮还有 $\text{dis}_u$ 被更新，则一定存在负环。  </p><blockquote><p> 证明：不妨归纳假设 $x$ 轮松弛可以得到所有最短路边数 $\leq x$ 的点的 $D_u$。显然 $x = 0$ 时正确（初始状态，无松弛，最短路边数为 $0$ ）。  不妨设 $x = k$ 时正确，考虑最短路边数为 $k + 1$ 的点。设其最短路径为 $s \to p_1 \to \dots \to p_k \to u$，由于 $\text{dis}_{p_k} = D_{p_k}$（归纳假设，$k$ 轮松弛已处理边数 $\leq k$ 的最短路径 ），因此一轮松弛（第 $k + 1$ 轮 ）后，$\text{dis}_u$ 会被更新为 $D_u$（通过边 $p_k \to u$ 的松弛操作 ）。  </p><p> 若不存在负环，所有点的最短路边数 $\leq n - 1$（$n$ 个顶点的图，最长简单路径边数为 $n - 1$ ），故 $n - 1$ 轮松弛后，所有点的最短路径都能被正确计算。  </p><p> 若存在负环，负环会导致路径长度可无限减小（每绕环一次，总长度更短 ）。此算法有限轮松弛只能处理“长度有限”的最短路径，而负环会让某些点的最短路径长度无限迭代更新，因此第 $n$ 轮若仍有更新，可判定存在负环。  </p></blockquote><p><strong>时间复杂度</strong>：$\mathcal{O}(nm)$（$n$ 轮松弛，每轮遍历 $m$ 条边 ）。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> dis[N][N],n,m; <span class="comment">//dis[k][v];表示选取前k个时到达i的最短距离</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123; <span class="type">int</span> u, v, w;&#125; edge[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bellman_Ford</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, INF, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)  dis[i][s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n - <span class="number">1</span>; k++)            </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="type">int</span> u = edge[i].u, v = edge[i].v, w = edge[i].w;</span><br><span class="line">            dis[k][v] = <span class="built_in">min</span>(dis[k][v], dis[k - <span class="number">1</span>][u] + w);    <span class="comment">//松弛操作</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2：SPFA"><a href="#3-2-2：SPFA" class="headerlink" title="3.2.2：SPFA"></a>3.2.2：SPFA</h3><p>SPFA（Shortest Path Faster Algorithm）是队列优化的 Bellman-Ford。<br>当松弛某个点 $u$ 时，对于所有与 $u$ 相邻且 $\text{dis}_v$ 被更新的点 $v$，若 $v$ 当前不在队列中，则将其压入队列。每次从队列中取出一个点进行松弛操作。<br>为检测负环，每个点额外记录最短路当前经过的边数 $\text{cnt}_u$；若存在某个点 $u$ 使得 $\text{cnt}_u \geq n$，则判定图中存在负环。  </p><blockquote><p>实际上其松弛过程与 Bellman-Ford 类似，可感性理解为：队列中始终维护了 ”可能通过进一步松弛缩短路径” 的点集。每次取出队首点松弛其邻接边，相当于 Bellman-Ford 中 “按需” 进行的局部松弛，避免了对所有边进行冗余检查。  </p></blockquote><p><strong>时间复杂度</strong>：最坏仍为 $\mathcal{O}(nm)$。在一般随机图上效率常优于 Bellman-Ford，但有特殊数据可以卡，需要慎重使用！</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dis[i] = INF, vis[i] = <span class="number">0</span>;</span><br><span class="line">    dis[s] = <span class="number">0</span>, vis[s] = <span class="number">1</span>, Q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u = Q.<span class="built_in">front</span>(); Q.<span class="built_in">pop</span>();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = e[i].nxt)&#123;</span><br><span class="line">            <span class="type">int</span> v = e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + e[i].c)&#123;     <span class="comment">// 松弛操作</span></span><br><span class="line">                dis[v] = dis[u] + e[i].c;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v])</span><br><span class="line">                    vis[v] = <span class="number">1</span>, Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3：Dijkstra"><a href="#3-2-3：Dijkstra" class="headerlink" title="3.2.3：Dijkstra"></a>3.2.3：Dijkstra</h3><p>Dijkstra 算法只适用于<strong>非负权图</strong>。</p><p>称 <strong>扩展</strong> 节点 $u$ 表示对 $u$ 所有的出边 $(u, v, w)$ 用 $\text{dis}_u + w$ 更新 $\text{dis}_v$。每次选择 $\text{dis}$ 最小的 <strong>未扩展过</strong> 的 $u$，对 $u$ 进行扩展。</p><blockquote><p>证明：只需要证明每次扩展的 $u$ 满足 $\text{dis}_u = D_u$。不妨归纳假设已经扩展过的点 $p_1, …, p_{k-1}$ 满足 $\text{dis}_u = D_u$，考虑下一个扩展的 $p_k$ 一定也得到最短路。否则也就意味着存在更短的路径 $s \rightsquigarrow p_i \rightarrow u_1 \rightsquigarrow p_k$，其中 $u_1$ 是没有被扩展的点，则此时 $\text{dis}_{u_1} &lt; \text{dis}_{p_k}$，与 $p_k$ 的选择矛盾。因此归纳成立。</p></blockquote><p>稀疏图实现时使用优先队列，扩展时如果有更新，则把 $(v, \text{dis}_v)$ 加入优先队列。每次从优先队列中取出最小的没有被扩展过的进行扩展。注意判断 $(v, d)$ 中的 $d$ 是否等于 $\text{dis}_v$，若不等则已经被扩展过。时间复杂度 $O(m \log m)$。</p><p>稠密图每次暴力找最小值，时间复杂度 $O(n^2)$。</p><p>当边权只有 0 和 1 时，使用双端队列代替优先队列。称为 01 BFS。时间复杂度 $O(n + m)$。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优先队列版本</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200005</span>;</span><br><span class="line"><span class="type">int</span> n, m, s, dis[N];</span><br><span class="line">vector&lt;PII&gt; v[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> d, id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">friend</span> <span class="keyword">operator</span>&lt;(node x, node y)&#123;</span><br><span class="line">        <span class="keyword">return</span> x.d &gt; y.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; Q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dij</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dis[i] = INF;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    Q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, s&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> d = Q.<span class="built_in">top</span>().d, id = Q.<span class="built_in">top</span>().id;</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (d &gt; dis[id]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(vis[id]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[id] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v[id].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="type">int</span> to = v[id][i].fi;</span><br><span class="line">            <span class="keyword">if</span> (dis[to] &gt; dis[id] + v[id][i].se)&#123;</span><br><span class="line">                dis[to] = dis[id] + v[id][i].se;</span><br><span class="line">                Q.<span class="built_in">push</span>(&#123;dis[to], to&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4：总结"><a href="#3-2-4：总结" class="headerlink" title="3.2.4：总结"></a>3.2.4：总结</h3><p>根据题目给出的数据范围，选择适合的算法。（如存在负环则不能使用 Dijkstra，稠密图和稀疏图等）。</p><h2 id="mathcal-Part-3-3-：全源最短路径问题"><a href="#mathcal-Part-3-3-：全源最短路径问题" class="headerlink" title="$\mathcal{Part\ 3.3}$：全源最短路径问题"></a>$\mathcal{Part\ 3.3}$：全源最短路径问题</h2><blockquote><p>$\text{Problem}$：求出任意两点之间的最短距离 $D_{s,t}$。</p></blockquote><h3 id="3-3-1：Johnson"><a href="#3-3-1：Johnson" class="headerlink" title="3.3.1：Johnson"></a>3.3.1：Johnson</h3><p>新建一个超级源点 $0$，从超级源点 0 向所有点连边，跑 BF/SPFA 得到最短路 $h_u$。将边 $(u, v, w)$ 改为 $(u, v, w + h_u - h_v)$，在新图上以 $s$ 源点跑 Dijkstra，则 $D_{s,t} = D_t + h_t - h_s$。</p><blockquote><p>证明：考虑对边进行操作后，原图和新图上路径长度</p><script type="math/tex; mode=display">L(s \rightarrow u_1 \rightarrow \cdots \rightarrow u_{k-1} \rightarrow t) = w_1 + w_2 + \cdots + w_k \\L'(s \rightarrow u_1 \rightarrow \cdots \rightarrow u_{k-1} \rightarrow t) = w_1 + h_s - h_{u_1} + w_2 + h_{u_1} - h_{u_2} + \cdots + w_k + h_{u_{k-1}} - h_t \\= L(s \rightarrow u_1 \rightarrow \cdots \rightarrow u_{k-1} \rightarrow t) + h_s - h_t</script><p>只相差一个只与起点终点有关的数，因此原图的最短路在新图上也是最短路。再考虑 $h$ 是最短路，因此 $h_v \leq h_u + w$，也就是新图是非负权图，可以使用 Dijkstra。</p></blockquote><p>时间复杂度 $O(nm \log m)$。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Star_F &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> N = <span class="number">5005</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, w, nxt;</span><br><span class="line">    &#125; e[M];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">        <span class="type">int</span> dis, id;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp; a) <span class="type">const</span> &#123; <span class="keyword">return</span> dis &gt; a.dis; &#125;</span><br><span class="line">        <span class="built_in">node</span>(<span class="type">int</span> d, <span class="type">int</span> x) &#123; dis = d, id = x; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line">    <span class="type">int</span> head[N], vis[N], t[N], cnt, n, m;</span><br><span class="line">    ll h[N], dis[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        e[++cnt].v = v, e[cnt].w = w, e[cnt].nxt = head[u], head[u] = cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="built_in">memset</span>(h, <span class="number">63</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">        h[s] = <span class="number">0</span>, vis[s] = <span class="number">1</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">            vis[u] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = e[i].nxt) &#123;</span><br><span class="line">                <span class="type">int</span> v = e[i].v;</span><br><span class="line">                <span class="keyword">if</span> (h[v] &gt; h[u] + e[i].w) &#123;</span><br><span class="line">                    h[v] = h[u] + e[i].w;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                        vis[v] = <span class="number">1</span>;</span><br><span class="line">                        q.<span class="built_in">push</span>(v); t[v]++;</span><br><span class="line">                        <span class="keyword">if</span> (t[v] == n + <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;node&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dis[i] = INF;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">node</span>(<span class="number">0</span>, s));</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">top</span>().id; q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">            vis[u] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = e[i].nxt) &#123;</span><br><span class="line">                <span class="type">int</span> v = e[i].v;</span><br><span class="line">                <span class="keyword">if</span> (dis[v] &gt; dis[u] + e[i].w) &#123;</span><br><span class="line">                    dis[v] = dis[u] + e[i].w;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) q.<span class="built_in">push</span>(<span class="built_in">node</span>(dis[v], v));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = <span class="built_in">rd</span>(); m = <span class="built_in">rd</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> u = <span class="built_in">rd</span>(), v = <span class="built_in">rd</span>(), w = <span class="built_in">rd</span>();</span><br><span class="line">            <span class="built_in">add</span>(u, v, w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">add</span>(<span class="number">0</span>, i, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">spfa</span>(<span class="number">0</span>)) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">1</span>; u &lt;= n; u++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = e[i].nxt) e[i].w += h[u] - h[e[i].v];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">dijkstra</span>(i);</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis[j] == INF)</span><br><span class="line">                    ans += j * INF;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ans += j * (dis[j] + h[j] - h[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2：Floyd（传递闭包）"><a href="#3-3-2：Floyd（传递闭包）" class="headerlink" title="3.3.2：Floyd（传递闭包）"></a>3.3.2：Floyd（传递闭包）</h3><p>初始化所有 $\text{dis}_{u,u} = 0, (u, v, w) \in E, \text{dis}_{u,v} \leftarrow w$。枚举中转点 $k$，起点 $i$，终点 $j$，用 $\text{dis}_{i,k} + \text{dis}_{k,j}$ 更新 $\text{dis}_{i,j}$。注意中转点必须在最外层枚举。</p><blockquote><p>考虑这样一个算法，$\text{dis}_{k,s,t}$ 表示 $s \leftrightarrow t$ 只经过编号 $\leq k$ 的最短路（不包括起点终点），转移即为加入 $k+1$，也就是 $\text{dis}_{k+1,s,t} = \min(\text{dis}_{k,s,t}, \text{dis}_{k,s,k+1} + \text{dis}_{k,k+1,t})$。 </p></blockquote><p>事实上省略第一维导致的重复转移并不会影响答案，即得到正常写的 Floyd 算法。</p><p>时间复杂度 $O(n^3)$。</p><p>此外 Floyd 计算闭包，也就是两点可达性可以做到 $O\left(\frac{n^3}{\omega}\right)$。$\omega$ 为 <code>bitset</code> 提供的 $\frac{1}{64}$ 常数优化。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            dis[i][j] = <span class="built_in">min</span>(dis[i][j], dis[i][k] + dis[k][j]);</span><br></pre></td></tr></table></figure><h3 id="3-3-3：总结"><a href="#3-3-3：总结" class="headerlink" title="3.3.3：总结"></a>3.3.3：总结</h3><p>还是要根据不同的数据来使用不同的算法，Floyd 优势在于代码简洁，如果图为稠密图，即 $m\approx n^2$ 时，选择 Floyd 算法更优。</p><h2 id="mathcal-Part-3-4-：扩展问题"><a href="#mathcal-Part-3-4-：扩展问题" class="headerlink" title="$\mathcal{Part\ 3.4}$：扩展问题"></a>$\mathcal{Part\ 3.4}$：扩展问题</h2><h3 id="3-4-1：最短路树（SPT）"><a href="#3-4-1：最短路树（SPT）" class="headerlink" title="3.4.1：最短路树（SPT）"></a>3.4.1：最短路树（SPT）</h3><p>我们希望用一个树形结构去刻画 $s$ 到每个点的最短路。在单源最短路径中，记录每个点最后被更新的前驱 $f_i$，即可得到图的<strong>最短路树</strong>。</p><p>不难发现一定满足 $\text{dis}_{f_i} + w(f_i, i) = \text{dis}_i$，并且一定不会存在环，也就是从 $s$ 出发沿树上走简单路径得到的就是最短路。</p><p>类似也能得到到达 $s$ 的最短路树。</p><blockquote><p><strong>扩展</strong>：在不含零环的图上保留 $\text{dis}_u + w = \text{dis}_v$ 的边，得到有向无环图（若有环则必然是零环）称为<strong>最短路 DAG</strong>。此 DAG 任意路径都是最短路，任意最短路在 DAG 上，任意生成树都是最短路树。</p></blockquote><p>例：<a href="https://www.luogu.com.cn/problem/CF545E">CF545E Paths and Trees</a></p><blockquote><p>无向正权联通图，求从 $u$ 出发权值和最小的最短路树。</p></blockquote><p>我们定义 $\text{pre}_i$ 表示最短路树上点 $i$ 的前驱，由于建的图是双向边，所以输出 $\lceil \frac{\text{pre}_i}{2} \rceil$ 即可。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Star_F&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>, M = N &lt;&lt; <span class="number">1</span>, inf = <span class="number">0x7f</span>;</span><br><span class="line">    <span class="type">int</span> n, m, s, h[N], e[M], ne[M], w[M], idx, pre[N];</span><br><span class="line">    ll dis[N];</span><br><span class="line">    <span class="type">bool</span> vis[N];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        ll w;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;a) <span class="type">const</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> w &gt; a.w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    priority_queue&lt;node&gt;q;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">        e[++idx] = b, ne[idx] = h[a], w[idx] = c, h[a] = idx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dij</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dis, inf, <span class="keyword">sizeof</span> dis);</span><br><span class="line">        q.<span class="built_in">push</span>((node)&#123;s, <span class="number">0</span>&#125;);</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> u=q.<span class="built_in">top</span>().to;q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">            vis[u] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i])&#123;</span><br><span class="line">                <span class="type">int</span> v = e[i];</span><br><span class="line">                <span class="keyword">if</span> (dis[v] &gt;= dis[u] + w[i])&#123;</span><br><span class="line">                    dis[v] = dis[u] + w[i];</span><br><span class="line">                    q.<span class="built_in">push</span>((node)&#123;v, dis[v]&#125;);</span><br><span class="line">                    pre[v] = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        n = rd, m = rd;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            <span class="type">int</span> a = rd, b = rd, c = rd;</span><br><span class="line">            <span class="built_in">add</span>(a, b, c), <span class="built_in">add</span>(b, a, c);</span><br><span class="line">        &#125;</span><br><span class="line">        s = rd;</span><br><span class="line">        <span class="built_in">dij</span>();</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == s) <span class="keyword">continue</span>;</span><br><span class="line">            sum += w[pre[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span> (i != s) cout &lt;&lt; (pre[i] + <span class="number">1</span> &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-2：删边最短路"><a href="#3-4-2：删边最短路" class="headerlink" title="3.4.2：删边最短路"></a>3.4.2：删边最短路</h3><blockquote><p>$\text{Problem}$：给定正权无向图，求删除每一条边后 1 到 n 的最短路。</p></blockquote><p>定义从 1 出发的最短路树为 $T_1$，达到 $n$ 的最短路树为 $T_n$。我们用 $T(y)$ 表示树 $T$ 上到 $y$ 的路径。</p><p>对于边 $(i, j)$ 若不在原最短路上则最短路不变，否则不妨设原最短路是 $1 \rightsquigarrow i \to j \rightsquigarrow n$，找到边 $(u, v, w)$ 使得 $u$ 不在 $T_1$ 中 $j$ 的子树内，$v$ 不在 $T_n$ 中 $i$ 的子树内。也就是只经过一条非树边。</p><p>具体实现时枚举非树边 $(u, v, w)$，找到 $u’ = \text{LCA}_{T_1}(u, n), v’ = \text{LCA}_{T_n}(v, 1)$，对于最短路 $(u’, v’)$ 之间的边用 $L(T_1(u)) + w + L(T_n(v))$ 更新答案。使用线段树等数据结构可做到 $O(m \log m)$。</p><blockquote><p>证明：以下的证明中认为 $T_1$ 中到 $n$ 的路径和 $T_n$ 中到 $1$ 的路径相同。</p><p>不妨设 $T_1$ 上 $j$ 的子树为 $A_j$，子树外为 $A_i$，$T_n$ 上 $i$ 的子树为 $B_i$，子树外为 $B_j$。</p><p>先证明 $A_j \cap B_i = \emptyset$，考虑若 $u \in A_j \cap B_i$，考虑下图</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ujelq8md.png" alt=""></p><p>其中 $a$ 为 $i \leftrightarrow j$ 边权，$c$ 为 $j \rightsquigarrow u$ 的最短路，$b$ 为 $i \rightsquigarrow u$ 的最短路，由于 $u \in A_j$，因此 $L(1 \rightsquigarrow i) + a + c \leq L(1 \rightsquigarrow i) + b$，即 $a + c \leq b$，同理 $a + b \leq c$，两式相加得到 $a \leq 0$ 矛盾。</p><p>于是考虑删边后的最短路 $P’$，由于 $1 \in A_i, n \in A_j$，找到第一条 $(u, v, w)$ 满足 $u \in A_i, v \in A_j$，把 $1 \rightsquigarrow u$ 换成 $T_1(u)$，不会经过 $(i, j)$，由于是最短路显然不劣，再由于之前的证明 $v \notin B_i$ 即 $v \in B_j$，同理可以替换成 $T_n(v)$，这样就得到只相差一条非树边的最短路。</p></blockquote><p>例：<a href="https://www.luogu.com.cn/problem/P2685">P2685 [TJOI2012] 桥</a></p><h3 id="3-4-3：平面图最小割"><a href="#3-4-3：平面图最小割" class="headerlink" title="3.4.3：平面图最小割"></a>3.4.3：平面图最小割</h3><p>我们先考虑网格图的最小割，事实上和一般平面图没有本质区别。</p><p>网格图从左上角 $s$ 到右下角 $t$ 的最小割，找到一种划分点集的方式 $V = S \cup T$ 满足 $s \in S, t \in T$ 且两端分别在 $S$ 和 $T$ 的边（即割边）权值之和最小。</p><p>考虑起点和终点把图外的平面分为两部分。我们把所有面建一个点，原来的边在边两边的平面对应的点连边，得到平面图的<strong>对偶图</strong>。</p><p>显然对偶图的最短路可以对应到一个合法的割。同样对于一个合法的割，对偶图中必然存在一条从左下到右上的路径。</p><p>也就是 <strong>平面图最小割等于对偶图最短路</strong>。</p><blockquote><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/25hr3a05.png" alt=""></p></blockquote><p>例：<a href="https://www.luogu.com.cn/problem/P4001">P4001 [ICPC-Beijing 200] 狼抓兔子</a></p><h2 id="mathcal-Part-3-5-：例题详解"><a href="#mathcal-Part-3-5-：例题详解" class="headerlink" title="$\mathcal{Part\ 3.5}$：例题详解"></a>$\mathcal{Part\ 3.5}$：例题详解</h2><h3 id="mathcal-A-：P1144-最短路计数"><a href="#mathcal-A-：P1144-最短路计数" class="headerlink" title="$\mathcal{A}$：P1144 最短路计数"></a>$\mathcal{A}$：<a href="https://www.luogu.com.cn/problem/P1144">P1144 最短路计数</a></h3><blockquote><p>求出从顶点 $1$ 开始到每个点的最短路径的方案数。</p></blockquote><p>思路：其实就是板子题，在每次更新最短路的时候，顺便记录一下方案数就可以。另外由于本题的边权都是 $1$，所以无需使用堆优化，使用普通的队列即可。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line">d[<span class="number">1</span>] = <span class="number">0</span>, vis[<span class="number">1</span>] = <span class="number">1</span>, c[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">Q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">    <span class="type">int</span> x = Q.<span class="built_in">front</span>();</span><br><span class="line">    Q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[x].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="type">int</span> t = G[x][i];</span><br><span class="line">        <span class="keyword">if</span> (!vis[t])&#123;</span><br><span class="line">            vis[t] = <span class="number">1</span>;</span><br><span class="line">            d[t] = d[x] + <span class="number">1</span>;</span><br><span class="line">            Q.<span class="built_in">push</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d[t] == d[x] + <span class="number">1</span>)      <span class="comment">// 顺便记录方案数</span></span><br><span class="line">            c[t] = (c[t] + c[x]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mathcal-B-：P1462-通往奥格瑞玛的道路"><a href="#mathcal-B-：P1462-通往奥格瑞玛的道路" class="headerlink" title="$\mathcal{B}$：P1462 通往奥格瑞玛的道路"></a>$\mathcal{B}$：<a href="https://www.luogu.com.cn/problem/P1462">P1462 通往奥格瑞玛的道路</a></h3><blockquote><p>$n$ 个点，$m$ 条边的无向图，边有边权，点有点权，求出一条 $1$ 到 $n$ 的路径，使得 <strong>边权之和</strong> 小于给定限制 $b$，并且最小化经过点权的最大值。$1 \le n\le10^4,1\le m \le 5\times10^4$。</p></blockquote><p>思路：看到求最大值最小，我们考虑二分答案。二分一个最大点权 $\text{mid}$，如果我们可以找到一条 只走点权 $\le \text{mid}$ 的点，并且边权和 $\le b$ 的一条路径 那么我们，那么我们更新 $l$ ，否则更新 $r$。时间复杂度 $\mathcal{O}(m\log m\log \max_{i=1}^{f_i})$。可以通过。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Star_F&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> N = <span class="number">10005</span>, M = <span class="number">100005</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="type">int</span> h[N], ne[M], e[M], w[M], idx;</span><br><span class="line">    <span class="type">int</span> n, m, k, a[N], l = INF, r, flag;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> W)</span></span>&#123;</span><br><span class="line">        e[++idx] = v, ne[idx] = h[u], w[idx] = W, h[u] = idx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> dis[N];</span><br><span class="line">    priority_queue&lt;PII&gt; q;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">        dis[<span class="number">1</span>] = k;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;dis[<span class="number">1</span>], <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">top</span>().se, d = q.<span class="built_in">top</span>().fi;</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(dis[u]!=d) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i;i=ne[i])&#123;</span><br><span class="line">                <span class="type">int</span> v = e[i];</span><br><span class="line">                <span class="keyword">if</span>(a[v]&gt;mid) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(dis[v]&lt;dis[u]-w[i]&amp;&amp;dis[u]-w[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    dis[v] = dis[u] - w[i];</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;dis[v], v&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[n] != <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            l = <span class="built_in">min</span>(l, a[i]), r = <span class="built_in">max</span>(r, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        flag = r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m;i++)&#123;</span><br><span class="line">            <span class="type">int</span> u, v, w;</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">            <span class="built_in">add</span>(u, v, w), <span class="built_in">add</span>(v, u, w);</span><br><span class="line">        &#125;</span><br><span class="line">        l = a[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l==flag<span class="number">+1</span>) cout &lt;&lt; <span class="string">&quot;AFK&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mathcal-C-：P4568-JLOI2011-飞行路线"><a href="#mathcal-C-：P4568-JLOI2011-飞行路线" class="headerlink" title="$\mathcal{C}$：P4568 [JLOI2011] 飞行路线"></a>$\mathcal{C}$：<a href="https://www.luogu.com.cn/problem/P4568">P4568 [JLOI2011] 飞行路线</a></h3><blockquote><p>给定一个 $n$ 个点，$m$ 条边的无向图，有边权，其中可以将 $k$ 条边的边权变为 $0$ ，求 $s\to t$ 的最短路径。</p></blockquote><p>思路：分层图模板题目。</p><p>我们考虑给每一层的内部正常连边，每层之间从上到下连权值为 $0$ 的边。如果我们这样建图的话，相当于每向下走一层，就相当于使用一次边权变为 $0$，所以我们求 $s$ 到 $t+n\times k$ 的最短路即可。(多加了 $k$ 层，每层 $n$  个结点，所以是 $t+n\times k$ )。</p><p>但是我们发现，其实可以不把分层图真的建出来，而是在求最短路的时候，使用动态规划的思想更新答案。</p><p>具体来讲，我们定义 $dis_{i,j}$ 表示从 $s$ 到 $i$ ，使用了 $j$ 次边权变为 $0$ 的最短路径长度。</p><p>对于一条边 $(u,v,w)$ 转移如下：</p><script type="math/tex; mode=display">\text{dis}_{v,j}=\begin{cases} \min(\text{dis}_{v,j},\text{dis}_{u,j-1}) \ \ (j\le k) \\\\ \min(\text{dis}_{v,j},\text{dis}_{u,j}+w)\end{cases}</script><p>时间复杂度：$\mathcal{O}(k\times m\log m)$。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis), <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[s][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>, s&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> l = q.<span class="built_in">top</span>().pos, cnt = q.<span class="built_in">top</span>().cnt;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[l][cnt])<span class="keyword">continue</span>;</span><br><span class="line">        vis[l][cnt] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[l]; i; i = e[i].next)&#123;</span><br><span class="line">            <span class="type">int</span> r = e[i].to, w = e[i].w;</span><br><span class="line">            <span class="keyword">if</span> (cnt &lt; k <span class="keyword">and</span> dis[r][cnt + <span class="number">1</span>] &gt; dis[l][cnt])&#123;</span><br><span class="line">                dis[r][cnt + <span class="number">1</span>] = dis[l][cnt];</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;dis[r][cnt + <span class="number">1</span>], cnt + <span class="number">1</span>, r&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dis[r][cnt] &gt; dis[l][cnt] + w)&#123;</span><br><span class="line">                dis[r][cnt] = dis[l][cnt] + w;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;dis[r][cnt], cnt, r&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, dis[t][i]);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="mathcal-Part-4-：双连通分量"><a href="#mathcal-Part-4-：双连通分量" class="headerlink" title="$\mathcal{Part \ 4}$：双连通分量"></a>$\mathcal{Part \ 4}$：双连通分量</h1><h2 id="mathcal-Part-4-1-：一些定义"><a href="#mathcal-Part-4-1-：一些定义" class="headerlink" title="$\mathcal{Part\ 4.1}$：一些定义"></a>$\mathcal{Part\ 4.1}$：一些定义</h2><ul><li><strong>割点</strong>：删去后使连通分量增加的点。  </li><li><p><strong>割边</strong>：删去后使连通分量增加的边，也称<strong>桥</strong>。  </p></li><li><p><strong>点双连通图</strong>：不存在割点的无向连通图。  </p></li><li><p><strong>边双连通图</strong>：不存在割边的无向连通图。  </p></li><li><p><strong>点双连通分量</strong>：极大点双连通子图，简称<strong>点双（V-BCC）</strong>。  </p></li><li><p><strong>边双连通分量</strong>：极大边双连通子图，简称<strong>边双（E-BCC）</strong>。  </p></li><li><p><strong>点双连通</strong>：$u, v$ 处于同一个点双。  </p></li><li><strong>边双连通</strong>：$u, v$ 处于同一个边双。</li></ul><h2 id="mathcal-Part-4-2-：无向图-DFS-树"><a href="#mathcal-Part-4-2-：无向图-DFS-树" class="headerlink" title="$\mathcal{Part\ 4.2}$：无向图 DFS 树"></a>$\mathcal{Part\ 4.2}$：无向图 DFS 树</h2><p>给定无向连通图 $G$，从 $r$ 开始 DFS，取出进入每个点 $i$ 时对应的边 $(\text{fa}_i, i)$ 得到以 $r$ 为根的叶向树。称 $(\text{fa}_i, i)$ 为<strong>树边</strong>，其余边为<strong>非树边</strong>。</p><p>每个点标号为被访问到的次序称为<strong>时间戳</strong>，简称 $\text{dfn}$。</p><p>最重要的性质是非树边两端具有 <strong>祖先后代关系</strong>。</p><h2 id="mathcal-Part-4-3-：双连通的简单性质"><a href="#mathcal-Part-4-3-：双连通的简单性质" class="headerlink" title="$\mathcal{Part\ 4.3}$：双连通的简单性质"></a>$\mathcal{Part\ 4.3}$：双连通的简单性质</h2><h3 id="4-3-1：边双连通"><a href="#4-3-1：边双连通" class="headerlink" title="4.3.1：边双连通"></a>4.3.1：边双连通</h3><p>直观理解边双：每断开一条割边，连通块个数都会加一。如果断开所有割边，会得到割边条数 $+1$ 个联通分量，每个联通分量都是边双。如果把同一个边双内的点进行缩点，得到一棵树。</p><p>下面的结论是显然的：</p><p>称从 $u$ 到 $v$ 必须经过的边为<strong>必经边</strong>，那么：</p><ol><li><p>两点之间任意一条迹上的所有割边，就是两点之间的所有必经边。</p></li><li><p>$a$ 和 $b$ 边双连通，$b$ 和 $c$ 边双连通，则 $a$ 和 $c$ 边双连通。</p></li><li><p>$u, v$ 边双连通当且仅当 $u, v$ 之间没有必经边。</p></li></ol><p>对于一条边 $(u, v)$，删去后找到路径 $u \rightsquigarrow v$，拼起来就是回路。</p><ol><li><p>边双内任意一条边 $(u, v)$ 存在经过此边的回路。</p></li><li><p>边双内任意一点 $u$ 存在经过此点的回路。</p></li><li><p>边双内任意两点 $u, v$，存在经过两点的回路。</p></li></ol><h3 id="4-3-2：点双联通"><a href="#4-3-2：点双联通" class="headerlink" title="4.3.2：点双联通"></a>4.3.2：点双联通</h3><p>直观理解点双：两个点双最多只有一个交点，不然就会变成一个。若 $S_1$ 与 $S_2$、$S_2$ 与 $S_3$ 有交，$S_3$ 与 $S_1$ 有交，那么交点一定是同一个。于是所有点双会形成类似树形的结构。</p><p>下面的结论是显然的：</p><ol><li><p>若两点双有交，那么交点一定是割点。</p></li><li><p>一个点是割点当且仅当它属于超过一个点双。</p></li><li><p>一条边直接连接的两点点双连通。</p></li><li><p>一条边恰属于一个点双。</p></li></ol><p>对于 $n \geq 3$ 的点双，对于点 $x$，度数必然 $\geq 2$，删去后找到相邻的 $u, v$，找到一条 $u, v$ 的路径拼起来。</p><ol><li><p>$n \geq 3$ 的点双内任意一点 $u$ 存在经过此点的简单环。</p></li><li><p>点双内任意两点 $u, v$，存在经过这两点的简单环。</p></li></ol><p>我们也可以得到更多的推论：</p><ol><li>$n \geq 3$ 的点双内对于点 $x$ 和边 $e$，存在经过 $x$ 和 $e$ 的简单环。</li></ol><blockquote><p>证明：把 $e = (u, v)$ 拆成 $(u, w), (w, v)$，显然不影响点双连通性，找经过 $x, w$ 的简单环即可。</p></blockquote><ol><li>$n \geq 3$ 的点双内对于点 $x \neq y$ 和边 $e$ 存在 $x \rightsquigarrow e \rightsquigarrow y$ 的简单路径。</li></ol><blockquote><p>证明：找经过 $x, e$ 的简单环 $C$，若 $y \in C$ 则成立。否则找到任意 $y \rightsquigarrow x$ 的路径 $P$，找到第一个 $C$ 上的点 $z$，必然存在 $z \neq x$ 的 $P$，拼接环 $C$ 的部分和 $z \rightsquigarrow y$ 的部分即可。</p></blockquote><ol><li>$n \geq 3$ 的点双任意不同三点 $x, y, z$ 存在 $x \rightsquigarrow y \rightsquigarrow z$ 的路径。</li></ol><h2 id="mathcal-Part-4-4-：点双"><a href="#mathcal-Part-4-4-：点双" class="headerlink" title="$\mathcal{Part\ 4.4}$：点双"></a>$\mathcal{Part\ 4.4}$：点双</h2><h2 id="mathcal-Part-4-5-：边双"><a href="#mathcal-Part-4-5-：边双" class="headerlink" title="$\mathcal{Part\ 4.5}$：边双"></a>$\mathcal{Part\ 4.5}$：边双</h2><h2 id="mathcal-Part-4-6-：圆方树"><a href="#mathcal-Part-4-6-：圆方树" class="headerlink" title="$\mathcal{Part\ 4.6}$：圆方树"></a>$\mathcal{Part\ 4.6}$：圆方树</h2><h1 id="mathcal-Part-5-：强连通分量"><a href="#mathcal-Part-5-：强连通分量" class="headerlink" title="$\mathcal{Part \ 5}$：强连通分量"></a>$\mathcal{Part \ 5}$：强连通分量</h1><h2 id="mathcal-Part-5-1-：一些定义"><a href="#mathcal-Part-5-1-：一些定义" class="headerlink" title="$\mathcal{Part\ 5.1}$：一些定义"></a>$\mathcal{Part\ 5.1}$：一些定义</h2><h2 id="mathcal-Part-5-2-：有向图-DFS-树"><a href="#mathcal-Part-5-2-：有向图-DFS-树" class="headerlink" title="$\mathcal{Part\ 5.2}$：有向图 DFS 树"></a>$\mathcal{Part\ 5.2}$：有向图 DFS 树</h2><h2 id="mathcal-Part-5-3-：SCC"><a href="#mathcal-Part-5-3-：SCC" class="headerlink" title="$\mathcal{Part\ 5.3}$：SCC"></a>$\mathcal{Part\ 5.3}$：SCC</h2><h2 id="mathcal-Part-6-：最小生成树"><a href="#mathcal-Part-6-：最小生成树" class="headerlink" title="$\mathcal{Part \ 6}$：最小生成树"></a>$\mathcal{Part \ 6}$：最小生成树</h2><h2 id="mathcal-Part-6-1-：一些定义"><a href="#mathcal-Part-6-1-：一些定义" class="headerlink" title="$\mathcal{Part\ 6.1}$：一些定义"></a>$\mathcal{Part\ 6.1}$：一些定义</h2><h2 id="mathcal-Part-6-2-：最小生成树求法"><a href="#mathcal-Part-6-2-：最小生成树求法" class="headerlink" title="$\mathcal{Part\ 6.2}$：最小生成树求法"></a>$\mathcal{Part\ 6.2}$：最小生成树求法</h2><h2 id="mathcal-Part-6-3-：Kruskal-重构树"><a href="#mathcal-Part-6-3-：Kruskal-重构树" class="headerlink" title="$\mathcal{Part\ 6.3}$：Kruskal 重构树"></a>$\mathcal{Part\ 6.3}$：Kruskal 重构树</h2><h1 id="mathcal-Part-7-：拟阵"><a href="#mathcal-Part-7-：拟阵" class="headerlink" title="$\mathcal{Part \ 7}$：拟阵"></a>$\mathcal{Part \ 7}$：拟阵</h1><h2 id="mathcal-Part-7-1-：引入"><a href="#mathcal-Part-7-1-：引入" class="headerlink" title="$\mathcal{Part\ 7.1}$：引入"></a>$\mathcal{Part\ 7.1}$：引入</h2><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h2 id="mathcal-Part-7-2-：拟阵上的最优化"><a href="#mathcal-Part-7-2-：拟阵上的最优化" class="headerlink" title="$\mathcal{Part\ 7.2}$：拟阵上的最优化"></a>$\mathcal{Part\ 7.2}$：拟阵上的最优化</h2><h2 id="mathcal-Part-7-3-：拟阵交"><a href="#mathcal-Part-7-3-：拟阵交" class="headerlink" title="$\mathcal{Part\ 7.3}$：拟阵交"></a>$\mathcal{Part\ 7.3}$：拟阵交</h2><h1 id="mathcal-Part-8-：图论综合"><a href="#mathcal-Part-8-：图论综合" class="headerlink" title="$\mathcal{Part \ 8}$：图论综合"></a>$\mathcal{Part \ 8}$：图论综合</h1><hr><p>到此为止，图论相关入门算法已全部介绍完毕。</p><p>欢迎反馈错误，欢迎私信交流。</p><h2 id="图论入门：-text-Finished-。-图论进阶：-text-Will-Come"><a href="#图论入门：-text-Finished-。-图论进阶：-text-Will-Come" class="headerlink" title="$图论入门：\text{Finished}$。 $图论进阶：\text{Will Come!}$"></a>$图论入门：\text{Finished}$。 $图论进阶：\text{Will Come!}$</h2>]]></content>
      
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『学习笔记』不定积分</title>
      <link href="/2025/09/06/%E3%80%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8F%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/"/>
      <url>/2025/09/06/%E3%80%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8F%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="『学习笔记』不定积分"><a href="#『学习笔记』不定积分" class="headerlink" title="『学习笔记』不定积分"></a>『学习笔记』不定积分</h2><p>原函数：$F(x)’=f(x)$，$F(x)$ 为 $f(x)$ 的一个原函数。</p><p>原函数存在：$f(x)$ 在 $I$ 连续，$\exists $ 可导函数 $F(x)$，$F’(x)=f(x)$</p><ul><li>$\left(F(x)+C\right)’ = f(x)$</li><li>$F’(x) = f(x)$，$\varPhi’(x) = f(x)$，$\left(F(x)-\varPhi(x)\right)’ = F’(x)-\varPhi’(x) = f(x)-f(x) \equiv 0$，$F(x)-\varPhi(x) \equiv C$ </li></ul><p>不定积分定义: $f(x)$ 的原函数的全体： 记作：$\displaystyle\int {f(x)} dx$。若：$F’(x) = f(x)$，$\boxed{\displaystyle\int f(x) dx = F(x) + C}$</p><p>公式（显而易见）：</p><ol><li>$\displaystyle \frac{d}{dx}\left(\int f(x)dx\right) = f(x)$</li><li><p>$\displaystyle d\left[\int f(x)dx\right] = f(x)dx$</p></li><li><p>$\displaystyle\int F’(x)dx = F(x) + C$</p></li><li><p>$\displaystyle\int 1 dF(x) = F(x) + C$</p></li></ol><p>积分表：</p><ul><li>$\displaystyle\int kdx = kx + C\longleftrightarrow \left(kx + C\right)’ = k$ </li><li>$\displaystyle\int x^{\mu}dx = \frac{x^{\mu + 1}}{\mu + 1} + C$（$\mu \neq -1\longleftrightarrow \left(x^{\mu + 1}\right)’ = (\mu + 1)x^{\mu}$，$\left(\frac{x^{\mu + 1}}{\mu + 1}\right)’ = x^{\mu}$</li><li>$\displaystyle\int \frac{1}{x}dx = \ln|x| + C \longleftrightarrow (\ln|x| + C)’ = \frac{1}{x}$</li><li>$\displaystyle\int \frac{1}{1 + x^2}dx = \arctan x + C \longleftrightarrow (\arctan x + C)’ = \frac{1}{1 + x^2}$</li><li>$\displaystyle\int \frac{1}{\sqrt{1 - x^2}}dx = \arcsin x + C \longleftrightarrow (\arcsin x + C)’ = \frac{1}{\sqrt{1 - x^2}}$</li><li>$\displaystyle\int \cos x dx = \sin x + C \longleftrightarrow (\sin x + C)’ = \cos x$</li><li>$\displaystyle\int \sin x dx = -\cos x + C \longleftrightarrow (-\cos x + C)’ = \sin x$</li><li>$\displaystyle\int \frac{1}{\cos^2 x}dx = \int \sec^2 x dx = \tan x + C \longleftrightarrow (\tan x + C)’ = \sec^2 x = \frac{1}{\cos^2 x}$</li><li>$\displaystyle\int \frac{1}{\sin^2 x}dx = \int \csc^2 x dx = -\cot x + C \longleftrightarrow (-\cot x + C)’ = \csc^2 x = \frac{1}{\sin^2 x}$</li><li>$\displaystyle\int \sec x \tan x dx = \sec x + C \longleftrightarrow (\sec x + C)’ = \sec x \tan x$</li><li>$\displaystyle\int \csc x \cot x dx = -\csc x + C \longleftrightarrow (-\csc x + C)’ = \csc x \cot x$</li><li>$\displaystyle\int a^x dx = \frac{a^x}{\ln a} + C \longleftrightarrow \left(\frac{a^x}{\ln a} + C\right)’ = \frac{a^x \ln a}{\ln a} = a^x$</li><li>$\displaystyle\int e^x dx = e^x + C \longleftrightarrow (e^x + C)’ = e^x$</li></ul><blockquote><p>性质：</p></blockquote><ul><li>$\displaystyle\int \left[f(x) \pm g(x)\right] dx = \int f(x) dx \pm \int g(x) dx$</li><li>$\displaystyle \int k f(x) dx = k \int f(x) dx$</li></ul><blockquote><p>第一换元积分法：</p></blockquote><ul><li><p>$\displaystyle\int f(u) du \stackrel{u = \varphi(x)}{=} \int f(\varphi(x)) d\varphi(x) = \int f(\varphi(x)) \varphi’(x) dx$（求导） </p></li><li><p>$\displaystyle \int f(\varphi(x)) \varphi’(x) dx = \int f(\varphi(x)) d\varphi(x) = \int f(u) du$（还原）</p></li></ul><p>通过第一换元积分法，得出：</p><ul><li>$\displaystyle  \int \tan x dx = \int \frac{\sin x}{\cos x} dx = -\int \frac{d\cos x}{\cos x} = -\ln|\cos x| + C$ </li><li>$\displaystyle \int \cot x dx = \int \frac{\cos x}{\sin x} dx = \int \frac{d\sin x}{\sin x} = \ln|\sin x| + C$</li></ul><p>例题 1：$\boxed{\displaystyle \int \frac{dx}{x(1 + 2\ln x)} }$</p><script type="math/tex; mode=display">\begin{align*} \int \frac{dx}{x(1 + 2\ln x)} &= \int \frac{1}{1 + 2\ln x} \cdot \frac{1}{x} dx = \int \frac{1}{1 + 2\ln x} d(\ln|x|) \quad (x > 0) \\ &= \frac{1}{2} \int \frac{1}{1 + 2\ln x} d(2\ln x + 1) = \frac{1}{2} \ln|2\ln x + 1| + C \end{align*}</script><p>例题 2：$\boxed{\displaystyle \int \tan^5 x \sec^3 x \, dx }$</p><script type="math/tex; mode=display">\begin{align*} \int \tan^5 x \sec^3 x \, dx &= \int \tan^4 x \sec^2 x \cdot \sec x \tan x \, dx  \int (\sec^2 x - 1)^2 \sec^2 x \, d(\sec x) \\ &= \int (\sec^6 x - 2\sec^4 x + \sec^2 x) \, d(\sec x) \\ &= \frac{\sec^7 x}{7} - \frac{2}{5} \sec^5 x + \frac{1}{3} \sec^3 x + C \end{align*}</script><blockquote><p>第二换元积分法：</p></blockquote><p>$\displaystyle \int f(x)dx = \int f(\psi(t))\psi’(t)dt$，其中 $x = \psi(t)$，且 $\psi(t)$ 单调、可导。</p><p>例题：$\boxed{\displaystyle \int \sqrt{a^2 - x^2} dx(a &gt; 0)}$：<br>令 $x = a\sin t$，$-\frac{\pi}{2} &lt; t &lt; \frac{\pi}{2}$，则 $dx = a\cos t dt$。 代入原积分： </p><script type="math/tex; mode=display">\begin{align*} \int \sqrt{a^2 - x^2} dx&=\int \sqrt{a^2 - a^2\sin^2 t} \cdot a\cos t dt\\ &=a^2 \int \cos^2 t dt\\ &=a^2 \int \frac{\cos 2t + 1}{2} dt\\ &=\frac{a^2}{4}\sin 2t + \frac{a^2}{2}t + C \end{align*}</script><p>回代，由 $\sin t = \frac{x}{a}$，得 $\sin 2t = 2 \cdot \frac{x}{a} \cdot \frac{\sqrt{a^2 - x^2}}{a}$，$t = \arcsin \frac{x}{a}$，则： </p><script type="math/tex; mode=display">\begin{align*} \frac{a^2}{4}\sin 2t + \frac{a^2}{2}t + C&=\frac{a^2}{4} \cdot 2 \cdot \frac{x}{a} \cdot \frac{\sqrt{a^2 - x^2}}{a} + \frac{a^2}{2} \arcsin \frac{x}{a} + C\\ &=\frac{1}{2}x\sqrt{a^2 - x^2} + \frac{a^2}{2}\arcsin \frac{x}{a} + C \end{align*}</script><p>常用三角换元技巧：</p><ul><li>$\sqrt{a^2 - x^2}$，$x = a\sin t$ </li><li>$\sqrt{x^2 + a^2}$，$x = a\tan t$ </li><li>$\sqrt{x^2 - a^2}$，$x = \pm a\sec t$</li></ul><p>简单的小公式：</p><ul><li><p>$\displaystyle\int \sec x \, dx = \ln|\sec x + \tan x| + C$ </p></li><li><p>$\displaystyle\int \csc x \, dx = \ln|\csc x - \cot x| + C$ </p></li><li><p>$\displaystyle\int \frac{dx}{a^2 + x^2} = \frac{1}{a} \arctan\frac{x}{a} + C$</p></li><li><p>$\displaystyle\int \frac{1}{\sqrt{a^2 - x^2}} dx = \arcsin\frac{x}{a} + C$ </p></li><li>$\displaystyle\int \frac{1}{\sqrt{a^2 + x^2}} dx = \ln(x + \sqrt{x^2 + a^2}) + C$ </li><li>$\displaystyle\int \frac{1}{\sqrt{x^2 - a^2}} dx = \ln|x + \sqrt{x^2 - a^2}| + C$</li></ul><p>例题：$\boxed{\displaystyle\int \frac{dx}{\sqrt{1 + x - x^2}}}$</p><script type="math/tex; mode=display">\begin{align*} \displaystyle\int \frac{dx}{\sqrt{1 + x - x^2}} &= \int \frac{dx}{\sqrt{\frac{5}{4} - \left(x - \frac{1}{2}\right)^2}} = \int \frac{dx}{\sqrt{\left(\frac{\sqrt{5}}{2}\right)^2 - \left(x - \frac{1}{2}\right)^2}}\\ &= \int \frac{d\left(x - \frac{1}{2}\right)}{\sqrt{\left(\frac{\sqrt{5}}{2}\right)^2 - \left(x - \frac{1}{2}\right)^2}} = \arcsin\frac{x - \frac{1}{2}}{\frac{\sqrt{5}}{2}} + C = \arcsin\frac{2x - 1}{\sqrt{5}} + C\end{align*}</script><blockquote><p>分部积分法：</p></blockquote><p>公式：$\displaystyle \int u dv=uv-\int vdu$</p><p>优先级：$e^x&gt;\sin x&gt;\cos x &gt; x&gt; x^2&gt;x^n$</p><p>例题 1：$\boxed{\displaystyle\int e^x \sin 2x \, dx }$</p><script type="math/tex; mode=display">\begin{align*} \int e^x \sin 2x \, dx &= \int \sin 2x \, de^x = e^x \sin 2x - \int e^x \, d\sin 2x = e^x \sin 2x - 2\int e^x \cos 2x \, dx \\&= e^x \sin 2x - 2\int \cos 2x \, de^x = e^x \sin 2x - 2\left(e^x \cos 2x + 2\int e^x \sin 2x \, dx\right) \\&= e^x \sin 2x - 2e^x \cos 2x - 4\int e^x \sin 2x \, dx \\ \int e^x \sin 2x \, dx &= \frac{1}{5}e^x (\sin 2x - 2\cos 2x) + C \end{align*}</script><p>例题 2（根号换元）：$\boxed{\displaystyle \int e^{\sqrt{x}} dx}$</p><script type="math/tex; mode=display">\begin{align*}&\text{令 } t = \sqrt{x}, x = t^2, dx = 2t dt \\ & \int e^{\sqrt{x}} dx=\int e^t \cdot 2t dt = 2\int t de^t = 2te^t - 2\int e^t dt = 2te^t - 2e^t + C \quad \text{（回代）} \\ &= 2\sqrt{x}e^{\sqrt{x}} - 2e^{\sqrt{x}} + C \end{align*}</script><blockquote><p>有理函数积分</p></blockquote><p>有理函数：一个多项式分式，例 $\dfrac{x^2+2x+3}{x-5}$。</p><ul><li><p>真分式：分母次数 $&gt;$ 分子次数，例 $\dfrac{x-1}{x^2+2x-2}$</p></li><li><p>假分式：分母次数 $\le$ 分子次数，例 $\dfrac{x^3}{x^3+x^2-7}$</p></li></ul><p>How: 假分式变成真分式？Answer：多项式除法（长除法）/ 拼凑法</p><p>例题 1：$\displaystyle\int \frac{3x + 2}{2x - 5} dx $</p><script type="math/tex; mode=display">\begin{align*} \int \frac{3x + 2}{2x - 5} dx &= \int \frac{3x - \frac{15}{2} + \frac{19}{2}}{2x - 5} dx = \int \left( \frac{3}{2} + \frac{19}{2} \cdot \frac{1}{2x - 5} \right) dx \\ &= \frac{3}{2}x + \frac{19}{2} \cdot \frac{1}{2} \int \frac{1}{2x - 5} d(2x - 5) \\ &= \frac{3}{2}x + \frac{19}{4} \ln|2x - 5| + C \end{align*}</script><p>例题 2：$\displaystyle \int \frac{1}{(1 + 2x)(1 + x^2)}dx$</p><p>$\displaystyle\frac{A}{1 + 2x} + \frac{Bx + C}{x^2 + 1} = \frac{Ax^2 + A + Bx + C + 2Bx^2 + 2Cx}{(1 + 2x)(x^2 + 1)}$</p><p>$\begin{cases}<br>A + 2B = 0 \<br>B + 2C = 0 \<br>A + C = 1<br>\end{cases}$</p><p>$\displaystyle A = \frac{4}{5}$，$\displaystyle B= -\frac{2}{5}$，$\displaystyle C= \frac{1}{5}$</p><p>①：$\displaystyle\int\frac{\frac 4 5 }{1+2x}=\frac{2}{5}\int \frac{1}{1 + 2x}d(2x + 1) = \frac{2}{5}\ln|2x + 1| + c$</p><p>②：$\displaystyle\int \frac{-\frac{2}{5}x + \frac{1}{5}}{x^2 + 1}dx = -\frac{1}{5}\int \frac{2x - 1}{x^2 + 1}dx = -\frac{1}{5}\left(\int \frac{d(x^2 + 1)}{x^2 + 1} - \frac{1}{1 + x^2}\right)dx= -\frac{1}{5}\left(\ln(x^2 + 1) - \arctan x\right) + C$</p><p>$\displaystyle\int \frac{1}{(1 + 2x)(1 + x^2)}dx = \frac{2}{5}\ln|2x + 1| - \frac{1}{5}\ln(x^2 + 1) + \frac{1}{5}\arctan x + C$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『学习笔记』导数</title>
      <link href="/2025/09/06/%E3%80%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8F%E5%AF%BC%E6%95%B0/"/>
      <url>/2025/09/06/%E3%80%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8F%E5%AF%BC%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="『学习笔记』导数"><a href="#『学习笔记』导数" class="headerlink" title="『学习笔记』导数"></a>『学习笔记』导数</h2><blockquote><p>导数：函数上某一点切线的斜率。</p></blockquote><p>$y=f(x)$ 在 $x_0$ 的某个邻域内有定义，$x$ 在 $x_0$ 取增量 $\Delta x$， $\Delta y=f(x_0+\Delta x)-f(x_0)$。</p><p>$f’(x_0)=\lim\limits_{\Delta x\to 0}\frac{\Delta y}{\Delta x}=\lim\limits_{\Delta x\to 0} \frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}$</p><p>符号：$y’\big|_{x=x_0}$，$\frac{dy}{dx}\big|_{x=x_0}$，$\frac{df(x)}{dx}\big|_{x=x_0}$</p><p>定义一：$\lim\limits_{\Delta x\to 0} \frac{f(x_0+\Delta x)-f(x_0)}{\Delta x} \Leftrightarrow \lim\limits_{h\to 0} \frac{f(x_0+h)-f(x_0)}{h}$</p><p>定义二：$\lim\limits_{x\to x_0} \frac{f(x)-f(x_0)}{x-x_0}$</p><hr><blockquote><p>导函数：在开区间 $(a,b)$ 上每个点都可导。</p></blockquote><p> 符号：$y’$，$f’(x)$，$\frac{dy}{dx}$，$\frac{df(x)}{dx}$</p><p>==Ⅰ：$f(x) = C$== </p><p>$f’(x) = \lim\limits_{\Delta x \to 0} \frac{f(x + \Delta x) - f(x)}{\Delta x} = \lim\limits_{\Delta x \to 0} \frac{C - C}{\Delta x} = 0$</p><p>==Ⅱ：$f(x) = x^n$，$n \in \mathbb{N}_+$== </p><p>前置知识：二项式定理 $(a + b)^n = \sum_{k=0}^{n} \mathrm{C}_n^k \, a^{n-k} b^k$</p><ul><li><p>当 $n = 1$ 时：   $f’(x) = \lim\limits_{h \to 0} \frac{f(x + h) - f(x)}{h} = \lim\limits_{h \to 0} \frac{(x + h) - x}{h} = \lim\limits_{h \to 0} \frac{h}{h} = 1$  </p></li><li><p>当 $n &gt; 1$ 时：   $f’(x) = \lim\limits_{h \to 0} \frac{f(x + h) - f(x)}{h} = \lim\limits_{h \to 0} \frac{(x + h)^n - x^n}{h}=\lim\limits_{h \to 0} \frac{\mathrm{C}_n^0 x^n + \mathrm{C}_n^1 x^{n - 1}h + \mathrm{C}_n^2 x^{n - 2}h^2 + \cdots + h^n - x^n}{h}$</p><p>化简得：$f’(x) = \lim\limits_{h \to 0} \left( n x^{n - 1} + \mathrm{C}_n^2 x^{n - 2}h + \cdots + h^{n - 1} \right) = n x^{n - 1}$</p></li></ul><p>可以推广到 $n\in\mathbb R$，留给读者自证。</p><p>==Ⅲ：$(\sin x)’=\cos x,(\cos x)’=-\sin x$==</p><p>$<br>\begin{align}<br>(\sin x)’ &amp;= \lim\limits_{h \to 0} \frac{\sin(x + h) - \sin x}{h} = \lim\limits_{h \to 0} \frac{\sin x \cos h + \cos x \sin h - \sin x}{h} \<br>&amp;= \lim\limits_{h \to 0} \left( \sin x \cdot \frac{\cos h - 1}{h} + \cos x \cdot \frac{\sin h}{h} \right) = \sin x \cdot \lim\limits_{h \to 0} \frac{\cos h - 1}{h} + \cos x \cdot \lim\limits_{h \to 0} \frac{\sin h}{h} \<br>&amp;= \sin x \cdot 0 + \cos x \cdot 1 \ &amp;= \cos x \<br>\end{align}<br>$</p><p>$<br>\begin{align}<br>(\cos x)’ &amp;= \lim\limits_{h \to 0} \frac{\cos(x + h) - \cos x}{h} = \lim\limits_{h \to 0} \frac{\cos x \cos h - \sin x \sin h - \cos x}{h} \<br>&amp;= \lim\limits_{h \to 0} \left( \cos x \cdot \frac{\cos h - 1}{h} - \sin x \cdot \frac{\sin h}{h} \right) = \cos x \cdot \lim\limits_{h \to 0} \frac{\cos h - 1}{h} - \sin x \cdot \lim\limits_{h \to 0} \frac{\sin h}{h} \<br>&amp;= \cos x \cdot 0 - \sin x \cdot 1 \ &amp;= -\sin x<br>\end{align}<br>$</p><p>==Ⅳ：$(a^x)’=a^x\ln a$==</p><p>$<br>\begin{align}<br>(a^x)’ &amp;= \lim\limits_{h \to 0} \frac{a^{x+h} - a^x}{h} = \lim\limits_{h \to 0} \frac{a^x \cdot a^h - a^x}{h} = a^x \cdot \lim\limits_{h \to 0} \frac{a^h - 1}{h} \<br>&amp;令\ t = a^h - 1，则\ a^h = t + 1，h = \log_a(t + 1) = \frac{\ln(t + 1)}{\ln a}，当\ h \to 0\ 时，t \to 0 \<br>&amp;= a^x \cdot \lim\limits_{t \to 0} \frac{t}{\frac{\ln(t + 1)}{\ln a}} = a^x \cdot \ln a \cdot \lim\limits_{t \to 0} \frac{t}{\ln(t + 1)} = a^x \cdot \ln a \cdot \lim\limits_{t \to 0} \frac{1}{\frac{1}{t}\ln(t + 1)} \<br>&amp;= a^x \cdot \ln a \cdot \lim\limits_{t \to 0} \frac{1}{\ln(1 + t)^{\frac{1}{t}}} = a^x \cdot \ln a \cdot \frac{1}{\ln e} \<br>&amp;= a^x \cdot \ln a<br>\end{align}<br>$</p><p>不难发现：$(e^x)’=e^x$。</p><p>==Ⅴ：$(\log_a^x)’=\frac{1}{x\ln a}$==</p><p>$<br>\begin{align}<br>(\log_a x)’ &amp;= \lim\limits_{h \to 0} \frac{\log_a (x + h) - \log_a x}{h} = \lim\limits_{h \to 0} \frac{\log_a \frac{x + h}{x}}{h} = \lim\limits_{h \to 0} \frac{1}{h} \log_a \left(1 + \frac{h}{x}\right) \<br>&amp;= \lim\limits_{h \to 0} \frac{1}{x} \cdot \frac{x}{h} \log_a \left(1 + \frac{h}{x}\right) = \frac{1}{x} \lim\limits_{h \to 0} \log_a \left(1 + \frac{h}{x}\right)^{\frac{x}{h}} \<br>&amp;令\ t = \frac{h}{x}，则\ h = xt，当\ h \to 0\ 时，t \to 0 \<br>&amp;= \frac{1}{x} \lim\limits_{t \to 0} \log_a \left(1 + t\right)^{\frac{1}{t}} = \frac{1}{x} \log_a \left[ \lim\limits_{t \to 0} \left(1 + t\right)^{\frac{1}{t}} \right] = \frac{1}{x} \log_a e = \frac{1}{x} \cdot \frac{\ln e}{\ln a} \<br>&amp;= \frac{1}{x \ln a}<br>\end{align}<br>$</p><p>不难发现：$\ln x=\frac{1}{x}$。</p><p>以上为一些简单函数的导函数。</p><hr><p><strong>$\text{Problem}$：$f(x) = |x|$，在 $x = 0$ 处的导数。</strong></p><p>$\lim\limits_{h \to 0} \frac{f(0 + h) - f(0)}{h} = \lim\limits_{h \to 0} \frac{|h|}{h}$   </p><ul><li>当 $h \to 0^+$ 时：$\lim\limits_{h \to 0^+} \frac{h}{h} = 1$         当 $h \to 0^-$ 时：$\lim\limits_{h \to 0^-} \frac{-h}{h} = -1$</li></ul><p>所以 $f(x) = |x|$，在 $x = 0$ 处不可导。结论：函数在某一点可导需要满足连续且<strong>光滑</strong>。</p><p><strong>单侧导数：</strong></p><p>右导数：$f’_{+}(x_0) = \lim\limits_{\Delta x \to 0^+} \frac{f(x_0 + \Delta x) - f(x_0)}{\Delta x}$   </p><p>左导数：$f’_{-}(x_0) = \lim\limits_{\Delta x \to 0^-} \frac{f(x_0 + \Delta x) - f(x_0)}{\Delta x}$</p><p>综上：$f(x)$ 在 $x_0$ 处可导 $\Leftrightarrow$ $f’_{+}(x_0)$ 和 $f’_{-}(x_0)$ 存在 且 $f’_{+}(x_0)=f’_{-}(x_0)$。</p><p>$f(x)$ 在 $[a,b]$ 上可导 $\Leftrightarrow$ $f(x)$ 在 $(a,b)$ 上可导，并且 $a$ 点有右导数，$b$ 点有左导数。</p><blockquote><p>导数的几何意义：</p></blockquote><p>切线斜率：$f’(x_0)$，切线方程：$y-y_0=f’(x_0)(x-x_0)$，法线方程：$y-y_0=-\frac{1}{f’(x_0)}\left ( x-x_0 \right )$</p><p><strong>$\text{Problem}$：求 $y=x^{\frac 3 2}$ 过 $(0,-4)$ 的切线方程。</strong></p><p>将 $(0,-4)$ 带入，发现不在函数上，故设切点坐标 $(x_0,y_0)$，所以 $y_0=x_0^{\frac 3 2}$。</p><p>对函数求导，得：$y’|_{x=x_0} = \frac 3 2 x_0^{\frac 1 2}$。所以切线方程：$y-x_0^{\frac 3 2} = \frac 3 2 x_0^{\frac 1 2}(x-x_0)$，将点 $(0,-4)$ 带入，得：$-4-x_0^{\frac 3 2}=-\frac 3 2x_0^{\frac 3 2}$，解得 $x_0=4,y_0=8$ ，所以切线方程为 $3x-y-4=0$。</p><blockquote><p>（一元函数）可导与连续的关系：</p></blockquote><p>Ⅰ：可导必连续 Ⅱ：连续未必可导</p><p>可导：$f’(x) = \lim\limits_{\Delta x \to 0} \frac{\Delta y}{\Delta x}$ 存在。一定满足 $\Delta y\to 0$。</p><ul><li>证明：$\frac{\Delta y}{\Delta x} = f’(x) + \alpha$，$\Delta y = f’(x)\Delta x + \alpha \Delta x$ ，$\lim\limits_{\Delta x \to 0} \Delta y = \lim\limits_{\Delta x \to 0} \left( f’(x)\Delta x + \alpha \Delta x \right) = 0$</li></ul><p>连续：①：$\lim\limits_{x \to x_0} f(x) = f(x_0)$   ②：$\lim\limits_{\Delta x \to 0} \Delta y = 0$</p><p>结论Ⅰ证毕！结论Ⅱ：可以发现 $y=|x|$ 等函数满足连续未必可导。</p><blockquote><p>求导公式：</p></blockquote><ul><li><p>==$(u\pm v)’ = u’\pm v’$==</p><p>  $<br>  \begin{align}<br>  (u \pm v)’ &amp;= \lim\limits_{\Delta x \to 0} \frac{[u(x + \Delta x) \pm v(x + \Delta x)] - [u(x) \pm v(x)]}{\Delta x} \<br>  &amp;= \lim\limits_{\Delta x \to 0} \frac{[u(x + \Delta x) - u(x)] \pm [v(x + \Delta x) - v(x)]}{\Delta x} \<br>  &amp;= \lim\limits_{\Delta x \to 0} \left( \frac{u(x + \Delta x) - u(x)}{\Delta x} \pm \frac{v(x + \Delta x) - v(x)}{\Delta x} \right) \<br>  &amp;= \lim\limits_{\Delta x \to 0} \frac{u(x + \Delta x) - u(x)}{\Delta x} \pm \lim\limits_{\Delta x \to 0} \frac{v(x + \Delta x) - v(x)}{\Delta x} \<br>  &amp;= u’(x) \pm v’(x)<br>  \end{align}<br>  $</p></li><li><p>==$(u\times v)’ =u’\cdot v+u\cdot v’$==</p><p>  $<br>  \begin{align}<br>  (u \times v)’ &amp;= \lim\limits_{\Delta x \to 0} \frac{u(x + \Delta x)v(x + \Delta x) - u(x)v(x)}{\Delta x} \<br>  &amp;= \lim\limits_{\Delta x \to 0} \frac{u(x + \Delta x)v(x + \Delta x) - u(x)v(x + \Delta x) + u(x)v(x + \Delta x) - u(x)v(x)}{\Delta x} \<br>  &amp;= \lim\limits_{\Delta x \to 0} \left[ \frac{u(x + \Delta x) - u(x)}{\Delta x} \cdot v(x + \Delta x) + u(x) \cdot \frac{v(x + \Delta x) - v(x)}{\Delta x} \right] \<br>  &amp;= \lim\limits_{\Delta x \to 0} \frac{u(x + \Delta x) - u(x)}{\Delta x} \cdot \lim\limits_{\Delta x \to 0} v(x + \Delta x) + u(x) \cdot \lim\limits_{\Delta x \to 0} \frac{v(x + \Delta x) - v(x)}{\Delta x} \<br>  &amp;= u’(x) \cdot v(x) + u(x) \cdot v’(x)<br>  \end{align}<br>  $</p></li></ul><ul><li><p>==$\large{(\frac u v)’ = \frac{u’\cdot v-u\cdot v’}{v^2}}$==</p><p>  $<br>  \begin{align}<br>  \left( \frac{u}{v} \right)’ &amp;= \lim\limits_{\Delta x \to 0} \frac{\frac{u(x + \Delta x)}{v(x + \Delta x)} - \frac{u(x)}{v(x)}}{\Delta x} \<br>  &amp;= \lim\limits_{\Delta x \to 0} \frac{u(x + \Delta x)v(x) - u(x)v(x + \Delta x)}{\Delta x \cdot v(x)v(x + \Delta x)} \<br>  &amp;= \lim\limits_{\Delta x \to 0} \frac{u(x + \Delta x)v(x) - u(x)v(x) + u(x)v(x) - u(x)v(x + \Delta x)}{\Delta x \cdot v(x)v(x + \Delta x)} \<br>  &amp;= \lim\limits_{\Delta x \to 0} \frac{1}{v(x)v(x + \Delta x)} \left[ v(x) \cdot \frac{u(x + \Delta x) - u(x)}{\Delta x} - u(x) \cdot \frac{v(x + \Delta x) - v(x)}{\Delta x} \right] \<br>  &amp;= \frac{u’(x)v(x) - u(x)v’(x)}{[v(x)]^2}<br>  \end{align}<br>  $</p></li><li><p>==$(C\cdot u)’=C\cdot u’$==</p><p>  $<br>  \begin{align}<br>  (C \cdot u)’ &amp;= \lim\limits_{\Delta x \to 0} \frac{C \cdot u(x + \Delta x) - C \cdot u(x)}{\Delta x} \<br>  &amp;= C \cdot \lim\limits_{\Delta x \to 0} \frac{u(x + \Delta x) - u(x)}{\Delta x} \<br>  &amp;= C \cdot u’(x)<br>  \end{align}<br>  $</p></li></ul><p>拓展：</p><ul><li>$(u+v+w)’=u’+v’+w’$</li><li>$(u\cdot v\cdot w)’= u’\cdot v\cdot w+u\cdot v’\cdot w+u\cdot v\cdot w’$</li><li>$\left( \frac{u}{v} \right)’ = \left( u \cdot \frac{1}{v} \right)’ = u’ \cdot \frac{1}{v} + u \cdot \left( \frac{1}{v} \right)’ = \frac{u’}{v} - u \cdot \frac{v’}{v^2} = \frac{u’v - uv’}{v^2}$（利用乘法求导证明除法求导）</li><li>$(\tan x)’ =\sec^2 x$</li><li>$(\cot x)’ =-\csc^2 x$ </li><li>$(\sec x)’ =\sec x\tan x$ </li><li>$(\csc x)’ =-\csc x\cot x$ </li></ul><p>正确性显然，留给读者自证。</p><blockquote><p>反函数求导</p></blockquote><p>$x = f(y)$ 在 $I_y$ 单调、可导，且 $f’(y) \neq 0$，则 $y = f^{-1}(x)$ 在 $I_x$ 也可导，且： $\left[ f^{-1}(x) \right]’ = \frac{1}{f’(y)}$ ，或 $\frac{dy}{dx} = \frac{1}{\frac{dx}{dy}}$</p><ul><li><p>==$(\arcsin x)’ = \frac{1}{\sqrt{1 - x^2}}$==</p><p>$<br>\begin{align<em>}<br>\text{设 } y = \arcsin x &amp;\implies x = \sin y,\ y \in \left( -\frac{\pi}{2}, \frac{\pi}{2} \right) \<br>\frac{dx}{dy} &amp;= (\sin y)’ = \cos y \<br>(\arcsin x)’ = \frac{dy}{dx} &amp;= \frac{1}{\cos y} = \frac{1}{\sqrt{1 - \sin^2 y}} = \frac{1}{\sqrt{1 - x^2}}<br>\end{align</em>}<br>$</p></li><li><p>==$(\arccos x)’ = -\frac{1}{\sqrt{1 - x^2}}$==</p><p>$<br>\begin{align<em>}<br>\text{设 } y = \arccos x &amp;\implies x = \cos y,\ y \in (0, \pi) \<br>\frac{dx}{dy} &amp;= (\cos y)’ = -\sin y \<br>(\arccos x)’ = \frac{dy}{dx} &amp;= \frac{1}{-\sin y} = -\frac{1}{\sqrt{1 - \cos^2 y}} = -\frac{1}{\sqrt{1 - x^2}}<br>\end{align</em>}<br>$</p></li></ul><ul><li><p>==$(\arctan x)’ = \frac{1}{1 + x^2}$==</p><p>$<br>\begin{align<em>}<br>\text{设 } y = \arctan x &amp;\implies x = \tan y,\ y \in \left( -\frac{\pi}{2}, \frac{\pi}{2} \right) \<br>\frac{dx}{dy} &amp;= (\tan y)’ = \sec^2 y = 1 + \tan^2 y \<br>(\arctan x)’ = \frac{dy}{dx} &amp;= \frac{1}{1 + \tan^2 y} = \frac{1}{1 + x^2}<br>\end{align</em>}<br>$</p></li><li><p>==$(\text{arccot}\, x)’ = -\frac{1}{1 + x^2}$==</p><p>$<br>\begin{align<em>}<br>\text{设 } y = \text{arccot}\, x &amp;\implies x = \cot y,\ y \in (0, \pi) \<br>\frac{dx}{dy} &amp;= (\cot y)’ = -\csc^2 y = -(1 + \cot^2 y) \<br>(\text{arccot}\, x)’ = \frac{dy}{dx} &amp;= \frac{1}{-(1 + \cot^2 y)} = -\frac{1}{1 + x^2}<br>\end{align</em>}<br>$</p></li></ul><blockquote><p>复合函数求导法则（<strong>链式法则 Chain rule</strong>）</p></blockquote><p><strong>定理</strong>：设 $ y = f(u) $，$ u = g(x) $， $ y = f(g(x)) $。   若 $ u = g(x) $ 在 $ x $ 处可导，且 $ y = f(u) $ 在 $ g(x) $ 处可导，那么 $ y = f(g(x)) $ 在 $ x $ 处可导，且有：$\frac{dy}{dx} = f’(u) \cdot g’(x) $   或：$ \frac{dy}{dx} = \frac{dy}{du} \cdot \frac{du}{dx} $    </p><p>推广：若 $ y = f(u) $，$ u = g(t) $，$ t = h(x) $，则复合函数 $ y = f(g(h(x))) $ 的导数为：   $ \frac{dy}{dx} = \frac{dy}{du} \cdot \frac{du}{dt} \cdot \frac{dt}{dx} $ </p><blockquote><p>高阶导数</p></blockquote><p>符号：$y’’ = (y’)’ $，$ \frac{d}{dx}\left( \frac{dy}{dx} \right) = \frac{d\left( \frac{dy}{dx} \right)}{dx} = \frac{d^2 y}{dx^2} $   。$y’’’ = (y’’)’ $，当阶数 $&gt;3$ 时，记作 $y^{(n)}$ 表示 $y$ 的 $n$ 阶导，同理 $\frac{d^ny}{dx^n}$。</p><ol><li><p>$(\sin x)^{(n)}=\sin\left( x + n \cdot \frac{\pi}{2} \right)$</p><p>数学归纳法证明：$(\sin x)’ = \cos x = \sin\left(x + \frac{\pi}{2}\right)$ </p><p>$(\sin x)’’ = \left[\sin\left(x + \frac{\pi}{2}\right)\right]’ = \cos\left(x + \frac{\pi}{2}\right) = \sin\left(x + 2 \cdot \frac{\pi}{2}\right)$ </p><p>$(\sin x)’’’ = \left[\sin\left(x + 2 \cdot \frac{\pi}{2}\right)\right]’ = \cos\left(x + 2 \cdot \frac{\pi}{2}\right) = \sin\left(x + 3 \cdot \frac{\pi}{2}\right)$ </p><p>$(\sin x)^{(n)} = \sin\left(x + n \cdot \frac{\pi}{2}\right)$</p></li><li><p>$(\cos x)^{(n)} = \cos\left( x + n \cdot \frac{\pi}{2} \right)$</p><p>数学归纳法证明：$(\cos x)’ = -\sin x = \cos\left(x + \frac{\pi}{2}\right)$ </p><p>$(\cos x)’’ = \left[ \cos\left(x + \frac{\pi}{2}\right) \right]’ = -\sin\left(x + \frac{\pi}{2}\right) = \cos\left(x + 2 \cdot \frac{\pi}{2}\right)$ </p><p>$(\cos x)’’’ = \left[ \cos\left(x + 2 \cdot \frac{\pi}{2}\right) \right]’ = -\sin\left(x + 2 \cdot \frac{\pi}{2}\right) = \cos\left(x + 3 \cdot \frac{\pi}{2}\right)$ </p><p>$(\cos x)^{(n)} = \cos\left(x + n \cdot \frac{\pi}{2}\right)$</p></li><li><p>$[\ln(x+1)]^{(n)} = (-1)^{n-1} \cdot \frac{(n-1)!}{(x+1)^n}$</p><p>数学归纳法证明：$[\ln(x+1)]’ = \frac{1}{x+1} = (-1)^{1-1} \cdot \frac{(1-1)!}{(x+1)^1}$ </p><p>$[\ln(x+1)]’’ = \left( \frac{1}{x+1} \right)’ = -\frac{1}{(x+1)^2} = (-1)^{2-1} \cdot \frac{(2-1)!}{(x+1)^2}$ </p><p>$[\ln(x+1)]’’’ = \left( -\frac{1}{(x+1)^2} \right)’ = \frac{2}{(x+1)^3} = (-1)^{3-1} \cdot \frac{(3-1)!}{(x+1)^3}$ </p><p>$[\ln(x+1)]^{(n)} = (-1)^{n-1} \cdot \frac{(n-1)!}{(x+1)^n}$</p></li></ol><blockquote><p>高阶求导法则</p></blockquote><ul><li><p>$(u\pm v)^{(n)}=u^{(n)}\pm v^{(n)}$</p></li><li><p>莱布尼茨公式：$(uv)^{(n)} = \mathrm{C}_n^0 u^{(n)}v^{(0)} + \mathrm{C}_n^1 u^{(n - 1)}v^{(1)} + \cdots + \mathrm{C}_n^n u^{(0)}v^{(n)}= \sum\limits_{k=0}^{n} \mathrm{C}_n^k u^{(n-k)} v^{(k)} $</p></li><li><p>$\displaystyle \left( \frac{u}{v} \right)^{(n)} = \sum_{k=0}^{n} \binom{n}{k} u^{(n-k)} \cdot \left[ (-1)^k \cdot k! \cdot \frac{\sum_{i=0}^{k} (-1)^i \binom{k}{i} v^{(k-i)} \cdot 0^i}{v^{k+1}} \right]$</p></li></ul><blockquote><p>隐函数求导</p></blockquote><p>对于隐函数 $F(x,y)=0$ 两边分别求导，提取 $y’$。</p><p>$\text{Problem}$：$e^y + xy = e$，求 $y’’$。</p><p>两边对 $x$ 求导：$e^y \cdot y’ + y + x \cdot y’ = 0$，$y’(e^y + x) = -y \implies y’ = -\frac{y}{e^y + x}$   </p><p>对 $y’ = -\frac{y}{e^y + x}$ 两边求导：$y’’ = -\frac{y’(e^y + x) - y \cdot (e^y \cdot y’ + 1)}{(e^y + x)^2}= -\frac{y’ \cdot (-\frac{y}{y’}) - y \cdot (e^y \cdot y’ + 1)}{(e^y + x)^2}$  整理，$y’’ = \frac{y e^y \cdot y’}{(e^y + x)^2} = \frac{y e^y \cdot (-\frac{y}{e^y + x})}{(e^y + x)^2} = -\frac{y^2 e^y}{(e^y + x)^3}$    </p><blockquote><p>对数求导</p></blockquote><p>幂指函数：$y=u^{v}$，$u,v$ 为关于 $x$ 的表达式，且 $u&gt;0$。 </p><ul><li>两边同时取 $\ln$，或两边同时作为 $e$ 的指数。</li></ul><p>$\text{Problem}$：求 $y = (1 + \cos x)^{\sin x}$（定义域：$1 + \cos x &gt; 0$，即 $x \neq (2k+1)\pi, k \in \mathbb{Z}$）的导数。 </p><p>两边取自然对数：$\ln y = \ln (1 + \cos x)^{\sin x} = \sin x \cdot \ln(1 + \cos x)$ </p><p>两边对 $x$ 求导：$\frac{1}{y} \cdot y’ = \cos x \cdot \ln(1 + \cos x) - \frac{\sin^2 x}{1 + \cos x}$ </p><p>解出  $y’ = y \cdot \left[ \cos x \cdot \ln(1 + \cos x) - \frac{\sin^2 x}{1 + \cos x} \right]= (1 + \cos x)^{\sin x} \cdot \left[ \cos x \cdot \ln(1 + \cos x) - \frac{\sin^2 x}{1 + \cos x} \right]$</p><blockquote><p>参数方程求导</p></blockquote><p>函数 $y = f(x)$，$\begin{cases}  x = \varphi(t) \  y = \psi(t)  \end{cases}$   对 $x$ 求导，得：$\dfrac{dy}{dx} = \dfrac{dy}{dt} \cdot \dfrac{dt}{dx} = \dfrac{dy}{dt} \cdot \dfrac{1}{\dfrac{dx}{dt}} = \dfrac{\psi’(t)}{\varphi’(t)}$ </p><p>$\dfrac{d^2y}{dx^2}= \dfrac{d\left( \dfrac{dy}{dx} \right)}{dx}=\dfrac{\dfrac {d\left( \dfrac{dy}{dx} \right)}{dt}}{\dfrac{dx}{dt}}= \dfrac{\psi’’(t)\varphi’(t) - \psi’(t)\varphi’’(t)}{\left( \varphi’(t) \right)^2}\cdot \dfrac{1}{\varphi’(t)}= \dfrac{\psi’’(t)\varphi’(t) - \psi’(t)\varphi’’(t)}{\left( \varphi’(t) \right)^3}$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『学习笔记』微分</title>
      <link href="/2025/09/06/%E3%80%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8F%E5%BE%AE%E5%88%86/"/>
      <url>/2025/09/06/%E3%80%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8F%E5%BE%AE%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="『学习笔记』微分："><a href="#『学习笔记』微分：" class="headerlink" title="『学习笔记』微分："></a>『学习笔记』微分：</h2><p><strong>定义：</strong> 函数 $y = f(x)$ 在点 $x_0$ 的某邻域内有定义，且 $x_0 + \Delta x$ 在该邻域内，函数增量 $\Delta y = f(x_0 + \Delta x) - f(x_0)$，若存在与 $\Delta x$ 无关的常数 $A$，使得 $\Delta y = A\Delta x + o(\Delta x)$，其中 $o(\Delta x)$ 是在 $\Delta x \to 0$ 时比 $\Delta x$ 更高阶的无穷小，则称 $f(x)$ 在 $x_0$ 处<strong>可微</strong>。记作   $\left. dy \right|_{x = x_0} = A\Delta x = A dx$。</p><p><strong>可微条件：</strong>可导，一元函数可微 $\Leftrightarrow$ 可导。</p><blockquote><p>微分公式：</p></blockquote><ul><li><p>$d(u \pm v) = du \pm dv$ </p></li><li><p>$d(cu) = c \, du$ </p></li><li><p>$d(uv) = u \, dv + v \, du=(uv)’dx$</p></li><li><p>$d\left( \frac{u}{v} \right) = \frac{v \, du - u \, dv}{v^2}=\left (\frac{u}{v} \right)’dx$</p></li></ul><p>复合函数：$y = f(u),\ u = g(x)$，$dy = y’_x dx = f’(u)g’(x)dx = f’(u)du$  </p><blockquote><p>近似计算：$f(x_0+\Delta x)\approx f(x_0)+f(x_0)’\cdot \Delta x$</p></blockquote><p>在 $|x|$ 比较小时，有以下结论：</p><p>$\sin x \approx  x$，$\tan x\approx  x$，$e^x\approx 1+x$，$\ln_{1+x}\approx x$，$(1+x)^\alpha \approx  1+\alpha\cdot x$</p><blockquote><p>微分中值定理：</p></blockquote><p><strong>费马引理</strong>：$f(x)$ 在 $x_0$ 的 $v(x_0)$ 有定义，在 $x_0$ 处可导，$\forall x\in v(x_0),f(x)\le f(x_0)$，或 $f(x)\ge  f(x_0)$，那么 $f(x_0)’=0$。</p><p>证明: $x \in v(x_0), f(x) \leq f(x_0)$，$x_0+\Delta x \in v(x_0),f(x_0+\Delta x) \leq f(x_0)$ </p><ul><li>$\Delta x&gt;0$  $f’_+(x_0)=\lim \limits_{\Delta x \to 0^+} \frac{f(x_0+\Delta x)-f(x_0)\ \le 0}{\Delta\  x&gt;0} \leq 0$ </li><li>$\Delta x&lt;0$  $f’_-(x_0)=\lim \limits_{\Delta x \to 0^-} \frac{f(x_0+\Delta x)-f(x_0)\ \le0}{\Delta x\ &lt;0} \geq 0$</li></ul><p>因 $f(x)$ 在 $x_0$ 可导，故 $f’_+(x_0)=f’_-(x_0)=f’(x_0)$，由夹逼定理得 $f’(x_0)=0$，证毕！</p><p><strong>罗尔定理</strong>：$f(x)$ 满足 Ⅰ：在 $[a,b]$ 连续，Ⅱ：在 $(a,b)$ 可导，Ⅲ：$f(a)=f(b)$，那么至少存在一点 $\xi $，满足 $f(\xi)’=0$。</p><ul><li>若 $f(x)$ 为常函数，则 $f’(x)=0$ 对任意 $x \in (a,b)$ 成立</li><li>若 $f(x)$ 非恒常，因闭区间连续必有最值，且 $f(a)=f(b)$，故最值至少一个在 $(a,b)$ 内取到，设 $\xi \in (a,b)$ 是极值点</li></ul><p>对极值点 $\xi$:</p><ul><li>$\Delta x &gt; 0$，$f(\xi+\Delta x) \leq f(\xi)$，$f’_+(\xi)=\lim \limits_{\Delta x \to 0^+}\frac{f(\xi+\Delta x)-f(\xi)}{\Delta x} \leq 0$</li><li>$\Delta x &lt; 0$，$f(\xi+\Delta x) \leq f(\xi)$，$f’_-(\xi)=\lim \limits_{\Delta x \to 0^-}\frac{f(\xi+\Delta x)-f(\xi)}{\Delta x} \geq 0$</li></ul><p>因 $f(x)$ 在 $\xi$ 可导，故 $f’_+(\xi)=f’_-(\xi)=f’(\xi)$，由夹逼定理得 $f’(\xi)=0$，证毕！</p><p><strong>拉格朗日中值定理</strong>：$f(x)$ 满足在 $[a,b]$ 连续，在 $(a,b)$ 可导，那么至少存在一点 $\xi\in(a,b)$，满足 $f(b)-f(a)=f(\xi)’(b-a)$</p><p>证明：构造辅助函数：记连接 $(a,f(a))$ 与 $(b,f(b))$ 的直线方程为 $L(x)=f(a)+\frac{f(b)-f(a)}{b-a}(x-a)$，</p><p>定义：$F(x)=f(x)-L(x)=f(x)-\left[f(a)+\frac{f(b)-f(a)}{b-a}(x-a)\right]$ </p><p>容易发现 $F(x)$ 满足罗尔定理：</p><ul><li>连续性：$L(x)$ 为连续一次函数，故 $F(x)$ 在 $[a,b]$ 连续   </li><li>可导性：$L’(x)=\frac{f(b)-f(a)}{b-a}$，故 $F(x)$ 在 $(a,b)$ 可导，且 $F’(x)=f’(x)-\frac{f(b)-f(a)}{b-a}$；     </li><li>端点等值：$F(a)=F(b)=0$。 </li></ul><p>综上，存在 $\xi\in(a,b)$ 使 $F’(\xi)=0$，代入 $F’(x)$ 得：$f’(\xi)-\frac{f(b)-f(a)}{b-a}=0$     即$f’(\xi)=\frac{f(b)-f(a)}{b-a}$ </p><p><strong>柯西中值定理</strong>：$f(x),g(x)$ 满足在 $[a,b]$ 连续，在 $(a,b)$ 可导，那么 $\exists \xi \in(a,b)$，使得 $\frac{f(b)-f(a)}{g(b)-g(a)}g’(\xi)=f’(\xi)$，如果 $g’(\xi)\ne 0$，可改写为 $\frac{f’(\xi)}{g’(\xi)}=\frac{f(b)-f(a)}{g(b)-g(a)}$</p><p>证明：因为 $g(a) \neq g(b)$，所以构造辅助函数：$F(x) = f(x) - \frac{f(b) - f(a)}{g(b) - g(a)}g(x)$   </p><p>容易发现 $F(x)$ 满足罗尔定理：</p><ul><li>连续性：在闭区间 $[a, b]$ 上连续   </li><li>可导性：在开区间 $(a, b)$ 上可导   </li><li>端点等值：$F(a) = F(b) = \frac{g(b)f(a) - g(a)f(b)}{g(b) - g(a)}$</li></ul><p>综上，$\exists \xi \in (a, b)$ 使得 $F’(\xi) = 0$，即：$\left. F’(x) \right|_{x = \xi} = f’(\xi) - \frac{f(b) - f(a)}{g(b) - g(a)}g’(\xi) = 0$</p><p>整理得：$\boxed{\frac{f(b) - f(a)}{g(b) - g(a)}g’(\xi) = f’(\xi)}$   若 $g’(\xi) \neq 0$，则有：$\boxed{\frac{f(b) - f(a)}{g(b) - g(a)} = \frac{f’(\xi)}{g’(\xi)}}$</p><p>定理Ⅰ：$f(x)$ 在 $I$ 连续，$I$ 内可导且导数恒为 $0$，则 $f(x) \equiv C$ </p><p>证明：$\forall x_1,x_2 \in I$，$x_1 &lt; x_2$，由拉格朗日中值定理，$\exists \xi \in (x_1,x_2)$，满足 $f(x_2) - f(x_1) = f’(\xi)(x_2 - x_1)$  所以 $f(x_2) = f(x_1)$ 、即 $f(x) \equiv C$</p><p>定理Ⅱ：当 $x &gt; 0$ 时，$\frac{x}{1 + x} &lt; \ln(1 + x) &lt; x$   </p><p>证明：$f(t) = \ln(1 + t)$，在 $[0, x]$ 用拉格朗日中值定理，$\exists \xi \in (0, x)$   $0 &lt; \xi &lt; x$，$f(x) - f(0) = f’(\xi)(x - 0)$，$f(0) = 0$，$f’(\xi) = \frac{1}{1 + \xi}$   所以，$\ln(1 + x) = \frac{x}{1 + \xi}$</p><p>由 $1 &lt; 1 + \xi &lt; 1 + x$，得 $\frac{x}{1 + x} &lt; \frac{x}{1 + \xi} &lt; \frac{x}{1}$，即 $\frac{x}{1 + x} &lt; \ln(1 + x) &lt; x$。</p><blockquote><p>洛必达法则！</p></blockquote><p>$\dfrac{0}{0},\dfrac{\infty}{\infty}$ 称为<strong>不定式</strong>。</p><ol><li>$x \to a$，$f(x) \to 0$，$F(x) \to 0$   </li><li>在 $a$ 的去心邻域内，$f’(x)$，$F’(x)$ 存在且 $F’(x) \neq 0$</li><li>$\lim\limits_{x \to a} \frac{f’(x)}{F’(x)}$ 存在（或无穷大）   </li></ol><p>则 $\lim\limits_{x \to a} \frac{f(x)}{F(x)} = \lim\limits_{x \to a} \frac{f’(x)}{F’(x)}$</p><blockquote><p>泰勒公式：</p></blockquote><p>$P_n(x) = a_0 + a_1(x - x_0) + a_2(x - x_0)^2 + \cdots + a_n(x - x_0)^n$ </p><p>$f(x)$在$x_0$处有$n$阶导数：</p><ul><li>$x_0$处：$f(x_0) = a_0$，$a_0 = f(x_0)$   </li><li>一阶：$f’(x)$，$P_n’(x) = a_1 + 2a_2(x - x_0) + \cdots + n a_n(x - x_0)^{n - 1}$，$a_1 = f’(x_0)$   </li><li>二阶：$f’’(x)$，$P_n’’(x) = 2a_2 + \cdots + n(n - 1)a_n(x - x_0)^{n - 2}$，$2a_2 = f’’(x_0)$，$a_2 = \frac{f’’(x_0)}{2}$   </li><li>$n$阶：$f^{(n)}(x)$，$P_n^{(n)}(x) = n! a_n$，$a_n n! = f^{(n)}(x_0)$，$a_n = \frac{f^{(n)}(x_0)}{n!}$</li></ul><p><strong>泰勒中值定理：</strong>$f(x)$ 在 $x = x_0$ 有 $n$ 阶导数，存在 $x_0$ 的一个邻域，$x \in U(x_0)$</p><p>$f(x) = f(x_0) + f’(x_0)(x - x_0) + \frac{f’’(x_0)}{2!}(x - x_0)^2 + \cdots + \frac{f^{(n)}(x_0)}{n!}(x - x_0)^n + R_n(x)$   </p><ul><li>佩亚诺余项：$R_n(x) = o((x - x_0)^n)$  </li><li>拉格朗日余项：$R_n(x) = \frac{f^{(n + 1)}(\xi)}{(n + 1)!}(x - x_0)^{n + 1}$     $\xi$：$x_0, x$ 之间</li></ul><p>$n=0$，$f(x)=f(x_0)+f’(\xi)(x - x_0)\Rightarrow f(x)-f(x_0)=f’(\xi)(x - x_0)$（拉格朗日中值定理）</p><p>$x_0 = 0$，$f(x) = f(0) + f’(0)x + \frac{f’’(0)}{2!}x^2 + \cdots + \frac{f^{(n)}(0)}{n!}x^n + o(x^n)$ （麦克劳林公式）</p><p>容易证明以下展开式：</p><p>$\displaystyle e^x = 1 + x + \frac{x^2}{2!} + \frac{x^3}{3!} + \cdots + \frac{x^n}{n!} + o(x^n)= \sum\limits_{n=0}^{\infty} \frac{x^n}{n!},\quad x \in \mathbb{R}$</p><p>$\displaystyle\sin x = x - \frac{x^3}{3!} + \frac{x^5}{5!} - \frac{x^7}{7!} + \cdots + R_{2m}(x)= \sum\limits_{n=0}^{\infty} \frac{(-1)^n x^{2n+1}}{(2n+1)!},\quad x \in \mathbb{R}$</p><p>$\displaystyle\cos x = 1 - \frac{x^2}{2!} + \frac{x^4}{4!} - \frac{x^6}{6!} + \cdots + R_{2m + 1}(x)= \sum\limits_{n=0}^{\infty} \frac{(-1)^n x^{2n}}{(2n)!},\quad x \in \mathbb{R}$</p><p>$\displaystyle\ln(1+x)=x - \frac{x^2}{2} + \frac{x^3}{3} - \frac{x^4}{4} + \cdots + (-1)^{n-1}\frac{x^n}{n} + R_n(x)= \sum\limits_{n=1}^{\infty} \frac{(-1)^{n-1} x^n}{n},\quad |x| \leq 1 \ (\text{且} \ x \neq -1)$</p><p>$\displaystyle(1+x)^\alpha = 1 + \alpha x + \frac{\alpha(\alpha - 1)}{2!}x^2 + \cdots + \frac{\alpha(\alpha - 1)\cdots(\alpha - n + 1)}{n!}x^n + R_n(x)= \sum\limits_{n=0}^{\infty} \binom{\alpha}{n} x^n, \quad |x| &lt; 1$</p><blockquote><p>函数单调性</p></blockquote><p>$f’(x)&gt;0$ 单调增；$f’(x)&lt;0$ 单调减。</p><blockquote><p>凸凹性拐点</p></blockquote><p>凹函数：$f(\dfrac{x_1+x_2}2)&lt;\dfrac{f(x_1)+f(x_2)}{2}$；凸函数：$f(\dfrac{x_1+x_2}2)&gt;\dfrac{f(x_1)+f(x_2)}{2}$</p><p><strong>凹凸判定定理：</strong></p><p>$f(x)$在$[a, b]$连续，$(a, b)$有一阶、二阶导数   </p><ul><li>$(a, b)$，$f’’(x) &gt; 0$，凹函数</li><li>$(a, b)$，$f’’(x) &lt; 0$，凸函数</li></ul><p>证明：取 $x_0 \in (a, b)$，由泰勒公式：$f(x) = f(x_0) + f’(x_0)(x - x_0) + \frac{1}{2} f’’(\xi)(x - x_0)^2, \quad \xi \text{ 在 } x_0 \text{ 与 } x \text{ 之间}$</p><p>其中切线方程为 $L(x) = f(x_0) + f’(x_0)(x - x_0)$。  </p><ul><li>若 $f’’(\xi) &gt; 0$，则 $f(x) - L(x) = \frac{1}{2} f’’(\xi)(x - x_0)^2 \geq 0$，即 $f(x) \geq L(x)$，曲线在切线上方，故凹；  </li><li>若 $f’’(\xi) &lt; 0$，则 $f(x) - L(x) = \frac{1}{2} f’’(\xi)(x - x_0)^2 \leq 0$，即 $f(x) \leq L(x)$，曲线在切线下方，故凸。  </li></ul><p>由 $x_0$ 任意性，结论成立。</p><p><strong>拐点：</strong>设函数 $f(x)$ 在点 $x_0$ 的某邻域内连续，若 $f(x)$ 在 $x_0$ 处凹凸性发生改变（即 $f’’(x)$ 在 $x_0$ 两侧异号），则称点 $(x_0, f(x_0))$ 为曲线 $y = f(x)$ 的<strong>拐点</strong>。</p><p>存在 $\delta &gt; 0$，使得  </p><ul><li><p>当 $x \in (x_0 - \delta, x_0)$ 时，$f’’(x) &gt; 0$（或 $&lt; 0$），  </p></li><li><p>当 $x \in (x_0, x_0 + \delta)$ 时，$f’’(x) &lt; 0$（或 $&gt; 0$），  </p></li></ul><p>则 $(x_0, f(x_0))$ 为拐点。  </p><blockquote><p>极值：</p></blockquote><p>$f(x)$，$U(x_0)$ 有定义，对$x \in \mathring{U}(x_0)$ $f(x) &lt; f(x_0)$（$f(x) &gt; f(x_0)$，$f(x_0)$ 为极大值（极小值）</p><p>第一充分条件：$f(x)$ 在 $x_0$ 连续，在 $\mathring{U}(x_0)$ 可导</p><ol><li>$x \in (x_0 - \delta, x_0)$，$f’(x) &gt; 0$；$x \in (x_0, x_0 + \delta)$，$f’(x) &lt; 0$，$x_0$处极大值 </li><li>$x \in (x_0 - \delta, x_0)$，$f’(x) &lt; 0$；$x \in (x_0, x_0 + \delta)$，$f’(x) &gt; 0$，$x_0$处极小值</li><li>$x \in \mathring{U}(x_0)$，$f’(x)$符号不变，不是极值 </li></ol><p>第二充分条件：$f(x)$在$x_0$有二阶导数，$f’(x_0) = 0$，$f’’(x_0) \neq 0$ </p><ol><li>$f’’(x_0) &lt; 0$，在$x_0$处取极大值  </li><li>$f’’(x_0) &gt; 0$，在$x_0$处取极小值</li></ol><blockquote><p>最值：在 $[a,b]$ 最大，最小</p></blockquote><p>$f(x)$ 在 $[a,b]$ 上连续，在 $(a,b)$ 不可导点有限个。</p><blockquote><p>曲率：</p></blockquote><p>$k = \dfrac{|y’’|}{(1 + (y’)^2)^{\frac{3}{2}}}$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
